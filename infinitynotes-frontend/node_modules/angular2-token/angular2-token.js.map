{"version":3,"file":"angular2-token.js","sources":["ts/src/angular2-token.ts","ts/src/a2t-ui/a2t-ui.module.ts","ts/src/a2t-ui/a2t-ui.routes.ts","ts/src/a2t-ui/a2t-update-password/a2t-update-password.component.ts","ts/src/a2t-ui/a2t-reset-password/a2t-reset-password.component.ts","ts/src/a2t-ui/a2t-sign-up/a2t-sign-up.component.ts","ts/src/a2t-ui/a2t-sign-in/a2t-sign-in.component.ts","ts/src/angular2-token.service.ts","ts/src/a2t-ui/a2t-ui.component.ts","ts/src/a2t-ui/a2t-ui.forms.ts","ts/src/a2t-ui/a2t-shared/a2t-shared.module.ts","ts/src/a2t-ui/a2t-shared/a2t-headline/a2t-headline.component.ts","ts/src/a2t-ui/a2t-shared/a2t-error/a2t-error.component.ts","ts/src/a2t-ui/a2t-shared/a2t-links/a2t-links.component.ts","ts/src/a2t-ui/a2t-shared/a2t-form/a2t-form.component.ts","ts/src/a2t-ui/a2t-shared/a2t-form/a2t-form-field/a2t-form-field.component.ts","ts/src/a2t-ui/a2t-shared/a2t-form/a2t-form.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {SignInData,RegisterData,UpdatePasswordData,ResetPasswordData,UserType,UserData,AuthData,Angular2TokenOptions,A2tUiModule,Angular2TokenService} from './public_api';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport {\n    a2tRoutes,\n    A2tUiComponent,\n    A2tSharedModule,\n} from './';\n\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\nexport class A2tUiModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        RouterModule,\n        A2tSharedModule,\n        a2tRoutes\n    ],\n    declarations: [\n        A2tUiComponent,\n        A2tSignInComponent,\n        A2tSignUpComponent,\n        A2tResetPasswordComponent,\n        A2tUpdatePasswordComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tUiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tUiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tUiModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport { A2tUiComponent } from './a2t-ui.component';\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\nconst /** @type {?} */ routes: Routes = [{\n        path: 'session',\n        component: A2tUiComponent,\n        children: [\n            { path: 'sign-in', component: A2tSignInComponent },\n            { path: 'sign-up', component: A2tSignUpComponent },\n            { path: 'reset-password', component: A2tResetPasswordComponent },\n            {\n                path: 'update-password',\n                component: A2tUpdatePasswordComponent,\n                canActivate: [Angular2TokenService]\n            }\n        ]\n}];\n\nexport const /** @type {?} */ a2tRoutes = RouterModule.forChild(routes);\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { UpdatePasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { UPDATE_PASSWORD_FORM } from '../';\nexport class A2tUpdatePasswordComponent {\n\n    _errors: string[];\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n * @param {?} _router\n */\nconstructor(\npublic _formService: A2tFormService,\npublic _sessionService: Angular2TokenService,\npublic _router: Router\n    ) {\n        this._formService.initForm(UPDATE_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: UpdatePasswordData) => this._sessionService.updatePassword(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleSuccess(data: any) {\n        this._router.navigate(['session/sign-in']);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-update-password',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Update your Password</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Update Password</a2t-form>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n{type: Router, },\n];\n}\n\nfunction A2tUpdatePasswordComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tUpdatePasswordComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tUpdatePasswordComponent.ctorParameters;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._errors;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._formService;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._sessionService;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { ResetPasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { RESET_PASSWORD_FORM } from '../';\nexport class A2tResetPasswordComponent {\n\n    _emailSend: boolean = false;\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n */\nconstructor(\nprivate _formService: A2tFormService,\nprivate _sessionService: Angular2TokenService\n    ) {\n        this._formService.initForm(RESET_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: ResetPasswordData) => this._sessionService.resetPassword(data).subscribe(\n                res =>      this._handleSuccess(),\n                error =>    this._handleError()\n            )\n        );\n    }\n/**\n * @return {?}\n */\nprivate _handleSuccess() {\n        this._emailSend = true;\n    }\n/**\n * @return {?}\n */\nprivate _handleError() {\n        this._emailSend = true;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:       'a2t-reset-password',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline *ngIf=\"!_emailSend\">Reset your Password</a2t-headline>\n        <a2t-form *ngIf=\"!_emailSend\">Reset Password</a2t-form>\n        <p class=\"email-send-text\" *ngIf=\"_emailSend\">\n            If the entered email is registered we will send instruction on how to reset your password.\n        </p>\n        <a2t-links *ngIf=\"!_emailSend\" case=\"reset-password\"></a2t-links>\n    `,\n    styles: [`\n        .email-send-text {\n            background-color: #72c380;\n            color: white;\n            font-size: 16pt;\n            text-align: center;\n            padding: 20px;\n            border-radius: 3px;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n];\n}\n\nfunction A2tResetPasswordComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tResetPasswordComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tResetPasswordComponent.ctorParameters;\n/** @type {?} */\nA2tResetPasswordComponent.prototype._emailSend;\n/** @type {?} */\nA2tResetPasswordComponent.prototype._formService;\n/** @type {?} */\nA2tResetPasswordComponent.prototype._sessionService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { RegisterData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_UP_FORM } from '../';\nexport class A2tSignUpComponent {\n\n    _errors: string[];\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n * @param {?} _router\n */\nconstructor(\npublic _formService: A2tFormService,\npublic _sessionService: Angular2TokenService,\npublic _router: Router\n    ) {\n        this._formService.initForm(SIGN_UP_FORM);\n        this._formService.submit$.subscribe(\n            (data: RegisterData) => this._sessionService.registerAccount(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate _handleError(error: any) {\n        this._errors = error.json().errors.full_messages;\n        this._formService.unlockSubmit();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:       'a2t-sign-up',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline>Sign Up</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign Up</a2t-form>\n        <a2t-links case=\"sign-up\"></a2t-links>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n{type: Router, },\n];\n}\n\nfunction A2tSignUpComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tSignUpComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tSignUpComponent.ctorParameters;\n/** @type {?} */\nA2tSignUpComponent.prototype._errors;\n/** @type {?} */\nA2tSignUpComponent.prototype._formService;\n/** @type {?} */\nA2tSignUpComponent.prototype._sessionService;\n/** @type {?} */\nA2tSignUpComponent.prototype._router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { SignInData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_IN_FORM } from '../';\nexport class A2tSignInComponent {\n\n    _errors: string[];\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n * @param {?} _router\n */\nconstructor(\npublic _formService: A2tFormService,\npublic _sessionService: Angular2TokenService,\npublic _router: Router\n    ) {\n        this._formService.initForm(SIGN_IN_FORM);\n        this._formService.submit$.subscribe(\n            (data: SignInData) => this._sessionService.signIn(data).subscribe(\n                (res: any) =>   this._handleSuccess(res),\n                (error: any) => this._handleError(error)\n            )\n        );\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-sign-in',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Sign In</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign In</a2t-form>\n        <a2t-links case=\"sign-in\"></a2t-links>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n{type: Router, },\n];\n}\n\nfunction A2tSignInComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tSignInComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tSignInComponent.ctorParameters;\n/** @type {?} */\nA2tSignInComponent.prototype._errors;\n/** @type {?} */\nA2tSignInComponent.prototype._formService;\n/** @type {?} */\nA2tSignInComponent.prototype._sessionService;\n/** @type {?} */\nA2tSignInComponent.prototype._router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport {\n    Http,\n    Response,\n    Headers,\n    Request,\n    RequestMethod,\n    RequestOptions,\n    RequestOptionsArgs\n} from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/observable/interval';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/pluck';\nimport'rxjs/add/operator/filter';\n\nimport {\n    SignInData,\n    RegisterData,\n    UpdatePasswordData,\n    ResetPasswordData,\n\n    UserType,\n    UserData,\n    AuthData,\n\n    Angular2TokenOptions\n} from './angular2-token.model';\nexport class Angular2TokenService implements CanActivate {\n/**\n * @return {?}\n */\nget currentUserType(): string {\n        if (this.atCurrentUserType != null)\n            return this.atCurrentUserType.name;\n        else\n            return null;\n    }\n/**\n * @return {?}\n */\nget currentUserData(): UserData {\n        return this.atCurrentUserData;\n    }\n/**\n * @return {?}\n */\nget currentAuthData(): AuthData {\n        return this.atCurrentAuthData;\n    }\n/**\n * @return {?}\n */\nget currentAuthHeaders(): Headers {\n        if (this.atCurrentAuthData != null) {\n            return new Headers({\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        return new Headers;\n    }\nprivate atOptions: Angular2TokenOptions;\nprivate atCurrentUserType: UserType;\nprivate atCurrentAuthData: AuthData;\nprivate atCurrentUserData: UserData;\n/**\n * @param {?} http\n * @param {?} activatedRoute\n * @param {?} router\n */\nconstructor(\nprivate http: Http,\nprivate activatedRoute: ActivatedRoute,\nprivate router: Router\n    ) { }\n/**\n * @return {?}\n */\nuserSignedIn(): boolean {\n        return !!this.atCurrentAuthData;\n    }\n/**\n * @return {?}\n */\ncanActivate(): boolean {\n        if (this.userSignedIn())\n            return true;\n        else {\n            // Store current location in storage (usefull for redirection after signing in)\n            if (this.atOptions.signInStoredUrlStorageKey) {\n                localStorage.setItem(\n                    this.atOptions.signInStoredUrlStorageKey,\n                    window.location.pathname + window.location.search\n                );\n            }\n\n            // Redirect user to sign in if signInRedirect is set\n            if(this.router && this.atOptions.signInRedirect)\n                this.router.navigate([this.atOptions.signInRedirect]);\n\n            return false;\n        }\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\ninit(options?: Angular2TokenOptions) {\n\n        let /** @type {?} */ defaultOptions: Angular2TokenOptions = {\n            apiPath:                    null,\n            apiBase:                    null,\n\n            signInPath:                 'auth/sign_in',\n            signInRedirect:             null,\n            signInStoredUrlStorageKey:  null,\n\n            signOutPath:                'auth/sign_out',\n            validateTokenPath:          'auth/validate_token',\n            signOutFailedValidate:      false,\n\n            registerAccountPath:        'auth',\n            deleteAccountPath:          'auth',\n            registerAccountCallback:    window.location.href,\n\n            updatePasswordPath:         'auth',\n\n            resetPasswordPath:          'auth/password',\n            resetPasswordCallback:      window.location.href,\n\n            userTypes:                  null,\n\n            oAuthBase:                  window.location.origin,\n            oAuthPaths: {\n                github:                 'auth/github'\n            },\n            oAuthCallbackPath:          'oauth_callback',\n            oAuthWindowType:            'newWindow',\n            oAuthWindowOptions:         null,\n\n            globalOptions: {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept':       'application/json'\n                }\n            }\n        };\n\n        this.atOptions = ( /** @type {?} */((<any>Object))).assign(defaultOptions, options);\n\n        this.tryLoadAuthData();\n    }\n/**\n * @param {?} registerData\n * @return {?}\n */\nregisterAccount(registerData: RegisterData): Observable<Response> {\n\n        if (registerData.userType == null)\n            this.atCurrentUserType = null;\n        else {\n            this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n            delete registerData.userType;\n        }\n\n        registerData.password_confirmation  = registerData.passwordConfirmation;\n        delete registerData.passwordConfirmation;\n\n        registerData.confirm_success_url    = this.atOptions.registerAccountCallback;\n\n        return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n    }\n/**\n * @return {?}\n */\ndeleteAccount(): Observable<Response> {\n        return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);\n    }\n/**\n * @param {?} signInData\n * @return {?}\n */\nsignIn(signInData: SignInData): Observable<Response> {\n\n        if (signInData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n\n        let /** @type {?} */ body = JSON.stringify({\n            email:      signInData.email,\n            password:   signInData.password\n        });\n\n        let /** @type {?} */ observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);\n\n        observ.subscribe(res => this.atCurrentUserData = res.json().data, _error => null);\n\n        return observ;\n    }\n/**\n * @param {?} oAuthType\n * @return {?}\n */\nsignInOAuth(oAuthType: string) {\n\n        let /** @type {?} */ oAuthPath: string = this.getOAuthPath(oAuthType);\n        let /** @type {?} */ callbackUrl: string = `${window.location.origin}/${this.atOptions.oAuthCallbackPath}`;\n        let /** @type {?} */ oAuthWindowType: string = this.atOptions.oAuthWindowType;\n        let /** @type {?} */ authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n        if (oAuthWindowType == 'newWindow') {\n            let /** @type {?} */ oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n            let /** @type {?} */ windowOptions = '';\n\n            if (oAuthWindowOptions) {\n                for (let /** @type {?} */ key in oAuthWindowOptions) {\n                    windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n                }\n            }\n\n            let /** @type {?} */ popup = window.open(\n                authUrl,\n                '_blank',\n                `closebuttoncaption=Cancel${windowOptions}`\n            );\n            return this.requestCredentialsViaPostMessage(popup);\n        } else if (oAuthWindowType == 'sameWindow') {\n            window.location.href = authUrl;\n        } else {\n            throw `Unsupported oAuthWindowType \"${oAuthWindowType}\"`;\n        }\n    }\n/**\n * @return {?}\n */\nprocessOAuthCallback(): void {\n        this.getAuthDataFromParams();\n    }\n/**\n * @return {?}\n */\nsignOut(): Observable<Response> {\n        let /** @type {?} */ observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);\n\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('client');\n        localStorage.removeItem('expiry');\n        localStorage.removeItem('tokenType');\n        localStorage.removeItem('uid');\n\n        this.atCurrentAuthData = null;\n        this.atCurrentUserType = null;\n        this.atCurrentUserData = null;\n\n        return observ;\n    }\n/**\n * @return {?}\n */\nvalidateToken(): Observable<Response> {\n        let /** @type {?} */ observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);\n\n        observ.subscribe(\n            res => this.atCurrentUserData = res.json().data,\n            error => {\n                if (error.status === 401 && this.atOptions.signOutFailedValidate) {\n                    this.signOut();\n                }\n            });\n\n        return observ;\n    }\n/**\n * @param {?} updatePasswordData\n * @return {?}\n */\nupdatePassword(updatePasswordData: UpdatePasswordData): Observable<Response> {\n\n        if (updatePasswordData.userType != null)\n            this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n\n        let /** @type {?} */ args: any;\n\n        if (updatePasswordData.passwordCurrent == null) {\n            args = {\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            }\n        } else {\n            args = {\n                current_password:       updatePasswordData.passwordCurrent,\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            };\n        }\n\n        if (updatePasswordData.resetPasswordToken) {\n            args.reset_password_token = updatePasswordData.resetPasswordToken;\n        }\n\n        let /** @type {?} */ body = JSON.stringify(args);\n        return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);\n    }\n/**\n * @param {?} resetPasswordData\n * @return {?}\n */\nresetPassword(resetPasswordData: ResetPasswordData): Observable<Response> {\n\n        if (resetPasswordData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n\n        let /** @type {?} */ body = JSON.stringify({\n            email:          resetPasswordData.email,\n            redirect_url:   this.atOptions.resetPasswordCallback\n        });\n\n        return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);\n    }\n/**\n * \n * HTTP Wrappers\n * \n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Get\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Post,\n            body:   body\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Put,\n            body:   body\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Delete\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Patch,\n            body:   body\n        }, options));\n    }\n/**\n * @param {?} path\n * @param {?=} options\n * @return {?}\n */\nhead(path: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request({\n            method: RequestMethod.Head,\n            url:    this.getApiPath() + path\n        });\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Options\n        }, options));\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nrequest(options: RequestOptionsArgs): Observable<Response> {\n\n        let /** @type {?} */ baseRequestOptions: RequestOptions;\n        let /** @type {?} */ baseHeaders:        { [key:string]: string; } = this.atOptions.globalOptions.headers;\n\n        // Get auth data from local storage\n        this.getAuthDataFromStorage();\n        \n        // Merge auth headers to request if set\n        if (this.atCurrentAuthData != null) {\n            ( /** @type {?} */((<any>Object))).assign(baseHeaders, {\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        baseRequestOptions = new RequestOptions({\n            headers: new Headers(baseHeaders)\n        });\n\n        // Merge standard and custom RequestOptions\n        baseRequestOptions = baseRequestOptions.merge(options);\n\n        let /** @type {?} */ response = this.http.request(new Request(baseRequestOptions)).share();\n        this.handleResponse(response);\n\n        return response;\n    }\n/**\n * @param {?} options\n * @param {?=} addOptions\n * @return {?}\n */\nprivate mergeRequestOptionsArgs(options: RequestOptionsArgs, addOptions?: RequestOptionsArgs): RequestOptionsArgs {\n\n        let /** @type {?} */ returnOptions: RequestOptionsArgs = options;\n\n        if (options)\n            ( /** @type {?} */((<any>Object))).assign(returnOptions, addOptions);\n\n        return returnOptions;\n    }\n/**\n * @param {?} response\n * @return {?}\n */\nprivate handleResponse(response: Observable<Response>): void {\n        response.subscribe(res => {\n            this.getAuthHeadersFromResponse( /** @type {?} */((<any>res)));\n        }, error => {\n            this.getAuthHeadersFromResponse( /** @type {?} */((<any>error)));\n        });\n    }\n/**\n * @return {?}\n */\nprivate tryLoadAuthData(): void {\n\n        let /** @type {?} */ userType = this.getUserTypeByName(localStorage.getItem('userType'));\n\n        if (userType)\n            this.atCurrentUserType = userType;\n\n        this.getAuthDataFromStorage();\n\n        if(this.activatedRoute)\n            this.getAuthDataFromParams();\n\n        if (this.atCurrentAuthData)\n            this.validateToken();\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getAuthHeadersFromResponse(data: any): void {\n        let /** @type {?} */ headers = data.headers;\n\n        let /** @type {?} */ authData: AuthData = {\n            accessToken:    headers.get('access-token'),\n            client:         headers.get('client'),\n            expiry:         headers.get('expiry'),\n            tokenType:      headers.get('token-type'),\n            uid:            headers.get('uid')\n        };\n\n        this.setAuthData(authData);\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getAuthDataFromPostMessage(data: any): void {\n        let /** @type {?} */ authData: AuthData = {\n            accessToken:    data['auth_token'],\n            client:         data['client_id'],\n            expiry:         data['expiry'],\n            tokenType:      'Bearer',\n            uid:            data['uid']\n        };\n\n        this.setAuthData(authData);\n    }\n/**\n * @return {?}\n */\nprivate getAuthDataFromStorage(): void {\n\n        let /** @type {?} */ authData: AuthData = {\n            accessToken:    localStorage.getItem('accessToken'),\n            client:         localStorage.getItem('client'),\n            expiry:         localStorage.getItem('expiry'),\n            tokenType:      localStorage.getItem('tokenType'),\n            uid:            localStorage.getItem('uid')\n        };\n\n        if (this.checkAuthData(authData))\n            this.atCurrentAuthData = authData;\n    }\n/**\n * @return {?}\n */\nprivate getAuthDataFromParams(): void {\n        if(this.activatedRoute.queryParams) // Fix for Testing, needs to be removed later\n            this.activatedRoute.queryParams.subscribe(queryParams => {\n                let /** @type {?} */ authData: AuthData = {\n                    accessToken:    queryParams['token'] || queryParams['auth_token'],\n                    client:         queryParams['client_id'],\n                    expiry:         queryParams['expiry'],\n                    tokenType:      'Bearer',\n                    uid:            queryParams['uid']\n                };\n\n                if (this.checkAuthData(authData))\n                    this.atCurrentAuthData = authData;\n            });\n    }\n/**\n * @param {?} authData\n * @return {?}\n */\nprivate setAuthData(authData: AuthData): void {\n\n        if (this.checkAuthData(authData)) {\n\n            this.atCurrentAuthData = authData;\n\n            localStorage.setItem('accessToken', authData.accessToken);\n            localStorage.setItem('client', authData.client);\n            localStorage.setItem('expiry', authData.expiry);\n            localStorage.setItem('tokenType', authData.tokenType);\n            localStorage.setItem('uid', authData.uid);\n\n            if (this.atCurrentUserType != null)\n                localStorage.setItem('userType', this.atCurrentUserType.name);\n\n        }\n    }\n/**\n * @param {?} authData\n * @return {?}\n */\nprivate checkAuthData(authData: AuthData): boolean {\n\n        if (\n            authData.accessToken != null &&\n            authData.client != null &&\n            authData.expiry != null &&\n            authData.tokenType != null &&\n            authData.uid != null\n        ) {\n            if (this.atCurrentAuthData != null)\n                return authData.expiry >= this.atCurrentAuthData.expiry;\n            else\n                return true;\n        } else {\n            return false;\n        }\n    }\n/**\n * \n * Construct Paths / Urls\n * \n * @return {?}\n */\nprivate getUserPath(): string {\n        if (this.atCurrentUserType == null)\n            return '';\n        else\n            return this.atCurrentUserType.path + '/';\n    }\n/**\n * @return {?}\n */\nprivate getApiPath(): string {\n        let /** @type {?} */ constructedPath = '';\n\n        if (this.atOptions.apiBase != null)\n            constructedPath += this.atOptions.apiBase + '/';\n\n        if (this.atOptions.apiPath != null)\n            constructedPath += this.atOptions.apiPath + '/';\n\n        return constructedPath;\n    }\n/**\n * @param {?} oAuthType\n * @return {?}\n */\nprivate getOAuthPath(oAuthType: string): string {\n        let /** @type {?} */ oAuthPath: string;\n\n        oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n\n        if (oAuthPath == null)\n            oAuthPath = `/auth/${oAuthType}`;\n\n        return oAuthPath;\n    }\n/**\n * @param {?} oAuthPath\n * @param {?} callbackUrl\n * @param {?} windowType\n * @return {?}\n */\nprivate getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n        let /** @type {?} */ url: string;\n\n        url =   `${this.atOptions.oAuthBase}/${oAuthPath}`;\n        url +=  `?omniauth_window_type=${windowType}`;\n        url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n        if (this.atCurrentUserType != null)\n            url += `&resource_class=${this.atCurrentUserType.name}`;\n\n        return url;\n    }\n/**\n * \n * OAuth\n * \n * @param {?} authWindow\n * @return {?}\n */\nprivate requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n        let /** @type {?} */ pollerObserv = Observable.interval(500);\n\n        let /** @type {?} */ responseObserv = Observable.fromEvent(window, 'message').pluck('data')\n            .filter(this.oAuthWindowResponseFilter);\n\n        let /** @type {?} */ responseSubscription = responseObserv.subscribe(\n            this.getAuthDataFromPostMessage.bind(this)\n        );\n\n        let /** @type {?} */ pollerSubscription = pollerObserv.subscribe(() => {\n            if (authWindow.closed)\n                pollerSubscription.unsubscribe();\n            else\n                authWindow.postMessage('requestCredentials', '*');\n        });\n\n        return responseObserv;\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate oAuthWindowResponseFilter(data: any): any {\n        if(data.message == 'deliverCredentials' || data.message == 'authFailure')\n            return data;\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getUserTypeByName(name: string): UserType {\n        if (name == null || this.atOptions.userTypes == null)\n            return null;\n\n        return this.atOptions.userTypes.find(\n            userType => userType.name === name\n        );\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: ActivatedRoute, decorators: [{ type: Optional }, ]},\n{type: Router, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction Angular2TokenService_tsickle_Closure_declarations() {\n/** @type {?} */\nAngular2TokenService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAngular2TokenService.ctorParameters;\n/** @type {?} */\nAngular2TokenService.prototype.atOptions;\n/** @type {?} */\nAngular2TokenService.prototype.atCurrentUserType;\n/** @type {?} */\nAngular2TokenService.prototype.atCurrentAuthData;\n/** @type {?} */\nAngular2TokenService.prototype.atCurrentUserData;\n/** @type {?} */\nAngular2TokenService.prototype.http;\n/** @type {?} */\nAngular2TokenService.prototype.activatedRoute;\n/** @type {?} */\nAngular2TokenService.prototype.router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../angular2-token.service';\nexport class A2tUiComponent {\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-ui',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <div class=\"a2t-container\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            width: 100%;\n            height: 100vh;\n            min-height: 500px;\n\n            padding-top: 100px;\n\n            display: flex;\n            justify-content: center;\n\n            background-color: #3270a0;\n        }\n\n        .a2t-logo {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n\n        .a2t-container {\n            width: 400px;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tUiComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tUiComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tUiComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Validators } from '@angular/forms';\nexport class BaseField{\n    value: string;\n    key: string;\n    label: string;\n    type: string;\n    validators: any[];\n/**\n * @param {?=} options\n */\nconstructor(options: {\n        value?: string,\n        key?: string,\n        label?: string,\n        type?: string,\n        validators?: any[],\n    } = {}) {\n        this.value = options.value;\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.validators = options.validators === undefined ? [] : options.validators;\n        this.type = options.type || '';\n    }\n}\n\nfunction BaseField_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseField.prototype.value;\n/** @type {?} */\nBaseField.prototype.key;\n/** @type {?} */\nBaseField.prototype.label;\n/** @type {?} */\nBaseField.prototype.type;\n/** @type {?} */\nBaseField.prototype.validators;\n}\n\n\nexport const /** @type {?} */ SIGN_IN_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const /** @type {?} */ SIGN_UP_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const /** @type {?} */ RESET_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const /** @type {?} */ UPDATE_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordCurrent',\n        label: 'Old Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { A2tFormComponent, A2tFormFieldComponent } from './a2t-form';\nimport { A2tLinksComponent } from './a2t-links/a2t-links.component';\nimport { A2tErrorComponent } from './a2t-error/a2t-error.component';\nimport { A2tHeadlineComponent } from './a2t-headline/a2t-headline.component';\nexport class A2tSharedModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        RouterModule\n    ],\n    declarations: [\n        A2tFormFieldComponent,\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ],\n    exports: [\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tSharedModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tSharedModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tSharedModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nexport class A2tHeadlineComponent {\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-headline',\n    template:   '<p><ng-content></ng-content></p>',\n    styles:  [`\n        p {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tHeadlineComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tHeadlineComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tHeadlineComponent.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nexport class A2tErrorComponent {\n\n     errors: string[];\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-error',\n    template:   '<div *ngFor=\"let error of errors\"><p>{{error}}</p></div>',\n    styles: [`\n        div {\n            width: 100%;\n            background-color: #df6564;\n            color: white;\n            font-weight: 300;\n            font-size: 15px;\n            padding: 10px 20px;\n            border-radius: 3px;\n            margin-bottom: 15px;\n        }\n\n        div > p {\n            margin-bottom: 0;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'errors': [{ type: Input },],\n};\n}\n\nfunction A2tErrorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tErrorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tErrorComponent.ctorParameters;\n/** @type {?} */\nA2tErrorComponent.propDecorators;\n/** @type {?} */\nA2tErrorComponent.prototype.errors;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nexport class A2tLinksComponent {\n\n     case: string;\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-links',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <p><a routerLink=\"/session/reset-password\" *ngIf=\"case != 'reset-password'\">Forgot Password?</a></p>\n            <p><a routerLink=\"/session/sign-up\" *ngIf=\"case != 'sign-up'\">Sign Up</a></p>\n            <p><a routerLink=\"/session/sign-in\" *ngIf=\"case != 'sign-in'\">Sign In</a></p>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            margin-top: 20px;\n        }\n\n        p {\n            margin-bottom: 0;\n        }\n\n        a {\n            color: #eee !important;\n            transition: .3s;\n            text-decoration: none;\n            font-size: 15px;\n            font-weight: 300;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        a:hover {\n            color: white;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'case': [{ type: Input },],\n};\n}\n\nfunction A2tLinksComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tLinksComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tLinksComponent.ctorParameters;\n/** @type {?} */\nA2tLinksComponent.propDecorators;\n/** @type {?} */\nA2tLinksComponent.prototype.case;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\n\nimport { A2tFormService } from './a2t-form.service';\nimport { A2tFormFieldComponent } from './a2t-form-field/a2t-form-field.component';\nexport class A2tFormComponent {\n/**\n * @param {?} _formService\n */\nconstructor(public _formService: A2tFormService) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'a2t-form',\n    template: `\n        <form class=\"a2t-form\"\n            (ngSubmit)=\"_formService.submit()\"\n            [formGroup]=\"_formService.formGroup\">\n\n            <a2t-form-field\n                *ngFor=\"let field of this._formService.fields\"\n                [question]=\"field\"\n                [form]=\"_formService.formGroup\">\n            </a2t-form-field>\n\n            <button type=\"submit\" [disabled]=\"!_formService.formGroup.valid || _formService.formGroup.pristine || _formService.submitLock\">\n                <ng-content *ngIf=\"!_formService.submitLock\"></ng-content>\n                <span *ngIf=\"_formService.submitLock\">Submitting ...</span>\n            </button>\n        </form>\n    `,\n    styles: [`\n        .a2t-form {\n            background-color: white;\n            border-radius: 3px;\n            box-shadow: 0px 1px 5px 0 rgba(0,0,0,0.3);\n            padding-top: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-form button {\n            width: 100%;\n\n            transition: .3s;\n            background-color: #72c380;\n\n            border-bottom-right-radius: 3px;\n            border-bottom-left-radius: 3px;\n\n            outline: none;\n            text-align: center;\n            font-weight: 400;\n            border: none;\n            font-size: 16px;\n            line-height: 30px;\n\n            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n            color: white;\n            border-bottom: 3px solid transparent;\n        }\n\n        .a2t-form button:disabled {\n            background-color: #eee !important;\n            cursor: not-allowed;\n            color: #999;\n            text-shadow: none;\n        }\n\n        .a2t-form button:hover {\n            background-color: #a6d9ae;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n];\n}\n\nfunction A2tFormComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tFormComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tFormComponent.ctorParameters;\n/** @type {?} */\nA2tFormComponent.prototype._formService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\n\nimport { BaseField } from '../../../a2t-ui.forms';\nexport class A2tFormFieldComponent implements OnInit {\n\n     question:  BaseField;\n     form:      FormGroup;\n\n    _control:   AbstractControl;\n/**\n * @return {?}\n */\nngOnInit() {\n        this._control = this.form.controls[this.question.key];\n    }\n/**\n * @return {?}\n */\nget isValid() {\n        return this._control.valid;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-form-field',\n    template: `\n        <div class=\"a2t-input-group\"\n            [formGroup]=\"form\">\n\n            <label\n                [attr.for]=\"question.key\"\n                [style.color]=\"labelColor\"\n                *ngIf=\"_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('required') && !_control.pristine\">\n                {{question.label}} is required\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('minlength')\">\n                {{question.label}} is too short\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('maxlength')\">\n                {{question.label}} is too long\n            </label>\n\n            <label class=\"a2t-valid\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.valid && !_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <input\n                [formControlName]=\"question.key\"\n                [id]=\"question.key\"\n                [type]=\"question.type\">\n        </div>\n    `,\n    styles: [`\n        .a2t-input-group {\n            padding-bottom: 40px;\n            padding-right: 20px;\n            padding-left: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-input-group input {\n            width: 100%;\n            outline: none;\n            border: none;\n            background-color: #eee;\n            line-height: 40px;\n\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n\n        .a2t-input-group label {\n            color: #666;\n            font-weight: 600;\n            font-size: 13px;\n            margin-bottom: 0;\n        }\n\n        .a2t-error {\n            color: #df6564 !important;\n        }\n\n        .a2t-valid {\n            color: #72c380 !important;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'question': [{ type: Input },],\n'form': [{ type: Input },],\n};\n}\n\nfunction A2tFormFieldComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tFormFieldComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tFormFieldComponent.ctorParameters;\n/** @type {?} */\nA2tFormFieldComponent.propDecorators;\n/** @type {?} */\nA2tFormFieldComponent.prototype.question;\n/** @type {?} */\nA2tFormFieldComponent.prototype.form;\n/** @type {?} */\nA2tFormFieldComponent.prototype._control;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\n\nimport { SignInData } from '../../../angular2-token.model';\nimport { BaseField } from '../../a2t-ui.forms';\nexport class A2tFormService {\npublic submit$ = new EventEmitter<any>();\npublic submitLock: boolean = false;\npublic formGroup: FormGroup;\npublic fields: BaseField[];\nconstructor() { }\n/**\n * @param {?} fields\n * @return {?}\n */\npublic initForm(fields: BaseField[]) {\n        this.fields = fields;\n        this._createFormGroup();\n    }\n/**\n * @return {?}\n */\npublic submit() {\n        this.submitLock = true;\n        this.submit$.emit(this.formGroup.value);\n    }\n/**\n * @return {?}\n */\npublic unlockSubmit() {\n        this.formGroup.reset();\n        this.submitLock = false;\n    };\n/**\n * @return {?}\n */\nprivate _createFormGroup() {\n\n        let /** @type {?} */ group: any = {};\n\n        this.fields.forEach(question => {\n            group[question.key] = new FormControl(null, question.validators);\n        });\n\n        this.formGroup = new FormGroup(group);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tFormService_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tFormService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tFormService.ctorParameters;\n/** @type {?} */\nA2tFormService.prototype.submit$;\n/** @type {?} */\nA2tFormService.prototype.submitLock;\n/** @type {?} */\nA2tFormService.prototype.formGroup;\n/** @type {?} */\nA2tFormService.prototype.fields;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Observable","router","http"],"mappings":"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"}
