{"version":3,"file":"angular2-token.umd.min.js","sources":["~/angular2-token/src/a2t-ui/a2t-shared/a2t-form/a2t-form.service.ts","~/angular2-token/src/a2t-ui/a2t-shared/a2t-form/a2t-form-field/a2t-form-field.component.ts","~/angular2-token/src/a2t-ui/a2t-shared/a2t-form/a2t-form.component.ts","~/angular2-token/src/a2t-ui/a2t-shared/a2t-links/a2t-links.component.ts","~/angular2-token/src/a2t-ui/a2t-shared/a2t-error/a2t-error.component.ts","~/angular2-token/src/a2t-ui/a2t-shared/a2t-headline/a2t-headline.component.ts","~/angular2-token/src/a2t-ui/a2t-shared/a2t-shared.module.ts","~/angular2-token/src/a2t-ui/a2t-ui.forms.ts","~/angular2-token/src/a2t-ui/a2t-ui.component.ts","~/angular2-token/src/angular2-token.service.ts","~/angular2-token/src/a2t-ui/a2t-sign-in/a2t-sign-in.component.ts","~/angular2-token/src/a2t-ui/a2t-sign-up/a2t-sign-up.component.ts","~/angular2-token/src/a2t-ui/a2t-reset-password/a2t-reset-password.component.ts","~/angular2-token/src/a2t-ui/a2t-update-password/a2t-update-password.component.ts","~/angular2-token/src/a2t-ui/a2t-ui.routes.ts","~/angular2-token/src/a2t-ui/a2t-ui.module.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\n\nimport { SignInData } from '../../../angular2-token.model';\nimport { BaseField } from '../../a2t-ui.forms';\nexport class A2tFormService {\npublic submit$ = new EventEmitter<any>();\npublic submitLock: boolean = false;\npublic formGroup: FormGroup;\npublic fields: BaseField[];\nconstructor() { }\n/**\n * @param {?} fields\n * @return {?}\n */\npublic initForm(fields: BaseField[]) {\n        this.fields = fields;\n        this._createFormGroup();\n    }\n/**\n * @return {?}\n */\npublic submit() {\n        this.submitLock = true;\n        this.submit$.emit(this.formGroup.value);\n    }\n/**\n * @return {?}\n */\npublic unlockSubmit() {\n        this.formGroup.reset();\n        this.submitLock = false;\n    };\n/**\n * @return {?}\n */\nprivate _createFormGroup() {\n\n        let /** @type {?} */ group: any = {};\n\n        this.fields.forEach(question => {\n            group[question.key] = new FormControl(null, question.validators);\n        });\n\n        this.formGroup = new FormGroup(group);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tFormService_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tFormService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tFormService.ctorParameters;\n/** @type {?} */\nA2tFormService.prototype.submit$;\n/** @type {?} */\nA2tFormService.prototype.submitLock;\n/** @type {?} */\nA2tFormService.prototype.formGroup;\n/** @type {?} */\nA2tFormService.prototype.fields;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\n\nimport { BaseField } from '../../../a2t-ui.forms';\nexport class A2tFormFieldComponent implements OnInit {\n\n     question:  BaseField;\n     form:      FormGroup;\n\n    _control:   AbstractControl;\n/**\n * @return {?}\n */\nngOnInit() {\n        this._control = this.form.controls[this.question.key];\n    }\n/**\n * @return {?}\n */\nget isValid() {\n        return this._control.valid;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-form-field',\n    template: `\n        <div class=\"a2t-input-group\"\n            [formGroup]=\"form\">\n\n            <label\n                [attr.for]=\"question.key\"\n                [style.color]=\"labelColor\"\n                *ngIf=\"_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('required') && !_control.pristine\">\n                {{question.label}} is required\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('minlength')\">\n                {{question.label}} is too short\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('maxlength')\">\n                {{question.label}} is too long\n            </label>\n\n            <label class=\"a2t-valid\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.valid && !_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <input\n                [formControlName]=\"question.key\"\n                [id]=\"question.key\"\n                [type]=\"question.type\">\n        </div>\n    `,\n    styles: [`\n        .a2t-input-group {\n            padding-bottom: 40px;\n            padding-right: 20px;\n            padding-left: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-input-group input {\n            width: 100%;\n            outline: none;\n            border: none;\n            background-color: #eee;\n            line-height: 40px;\n\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n\n        .a2t-input-group label {\n            color: #666;\n            font-weight: 600;\n            font-size: 13px;\n            margin-bottom: 0;\n        }\n\n        .a2t-error {\n            color: #df6564 !important;\n        }\n\n        .a2t-valid {\n            color: #72c380 !important;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'question': [{ type: Input },],\n'form': [{ type: Input },],\n};\n}\n\nfunction A2tFormFieldComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tFormFieldComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tFormFieldComponent.ctorParameters;\n/** @type {?} */\nA2tFormFieldComponent.propDecorators;\n/** @type {?} */\nA2tFormFieldComponent.prototype.question;\n/** @type {?} */\nA2tFormFieldComponent.prototype.form;\n/** @type {?} */\nA2tFormFieldComponent.prototype._control;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\n\nimport { A2tFormService } from './a2t-form.service';\nimport { A2tFormFieldComponent } from './a2t-form-field/a2t-form-field.component';\nexport class A2tFormComponent {\n/**\n * @param {?} _formService\n */\nconstructor(public _formService: A2tFormService) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'a2t-form',\n    template: `\n        <form class=\"a2t-form\"\n            (ngSubmit)=\"_formService.submit()\"\n            [formGroup]=\"_formService.formGroup\">\n\n            <a2t-form-field\n                *ngFor=\"let field of this._formService.fields\"\n                [question]=\"field\"\n                [form]=\"_formService.formGroup\">\n            </a2t-form-field>\n\n            <button type=\"submit\" [disabled]=\"!_formService.formGroup.valid || _formService.formGroup.pristine || _formService.submitLock\">\n                <ng-content *ngIf=\"!_formService.submitLock\"></ng-content>\n                <span *ngIf=\"_formService.submitLock\">Submitting ...</span>\n            </button>\n        </form>\n    `,\n    styles: [`\n        .a2t-form {\n            background-color: white;\n            border-radius: 3px;\n            box-shadow: 0px 1px 5px 0 rgba(0,0,0,0.3);\n            padding-top: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-form button {\n            width: 100%;\n\n            transition: .3s;\n            background-color: #72c380;\n\n            border-bottom-right-radius: 3px;\n            border-bottom-left-radius: 3px;\n\n            outline: none;\n            text-align: center;\n            font-weight: 400;\n            border: none;\n            font-size: 16px;\n            line-height: 30px;\n\n            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n            color: white;\n            border-bottom: 3px solid transparent;\n        }\n\n        .a2t-form button:disabled {\n            background-color: #eee !important;\n            cursor: not-allowed;\n            color: #999;\n            text-shadow: none;\n        }\n\n        .a2t-form button:hover {\n            background-color: #a6d9ae;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n];\n}\n\nfunction A2tFormComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tFormComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tFormComponent.ctorParameters;\n/** @type {?} */\nA2tFormComponent.prototype._formService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nexport class A2tLinksComponent {\n\n     case: string;\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-links',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <p><a routerLink=\"/session/reset-password\" *ngIf=\"case != 'reset-password'\">Forgot Password?</a></p>\n            <p><a routerLink=\"/session/sign-up\" *ngIf=\"case != 'sign-up'\">Sign Up</a></p>\n            <p><a routerLink=\"/session/sign-in\" *ngIf=\"case != 'sign-in'\">Sign In</a></p>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            margin-top: 20px;\n        }\n\n        p {\n            margin-bottom: 0;\n        }\n\n        a {\n            color: #eee !important;\n            transition: .3s;\n            text-decoration: none;\n            font-size: 15px;\n            font-weight: 300;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        a:hover {\n            color: white;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'case': [{ type: Input },],\n};\n}\n\nfunction A2tLinksComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tLinksComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tLinksComponent.ctorParameters;\n/** @type {?} */\nA2tLinksComponent.propDecorators;\n/** @type {?} */\nA2tLinksComponent.prototype.case;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nexport class A2tErrorComponent {\n\n     errors: string[];\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-error',\n    template:   '<div *ngFor=\"let error of errors\"><p>{{error}}</p></div>',\n    styles: [`\n        div {\n            width: 100%;\n            background-color: #df6564;\n            color: white;\n            font-weight: 300;\n            font-size: 15px;\n            padding: 10px 20px;\n            border-radius: 3px;\n            margin-bottom: 15px;\n        }\n\n        div > p {\n            margin-bottom: 0;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'errors': [{ type: Input },],\n};\n}\n\nfunction A2tErrorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tErrorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tErrorComponent.ctorParameters;\n/** @type {?} */\nA2tErrorComponent.propDecorators;\n/** @type {?} */\nA2tErrorComponent.prototype.errors;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nexport class A2tHeadlineComponent {\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-headline',\n    template:   '<p><ng-content></ng-content></p>',\n    styles:  [`\n        p {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tHeadlineComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tHeadlineComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tHeadlineComponent.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { A2tFormComponent, A2tFormFieldComponent } from './a2t-form';\nimport { A2tLinksComponent } from './a2t-links/a2t-links.component';\nimport { A2tErrorComponent } from './a2t-error/a2t-error.component';\nimport { A2tHeadlineComponent } from './a2t-headline/a2t-headline.component';\nexport class A2tSharedModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        RouterModule\n    ],\n    declarations: [\n        A2tFormFieldComponent,\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ],\n    exports: [\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tSharedModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tSharedModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tSharedModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Validators } from '@angular/forms';\nexport class BaseField{\n    value: string;\n    key: string;\n    label: string;\n    type: string;\n    validators: any[];\n/**\n * @param {?=} options\n */\nconstructor(options: {\n        value?: string,\n        key?: string,\n        label?: string,\n        type?: string,\n        validators?: any[],\n    } = {}) {\n        this.value = options.value;\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.validators = options.validators === undefined ? [] : options.validators;\n        this.type = options.type || '';\n    }\n}\n\nfunction BaseField_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseField.prototype.value;\n/** @type {?} */\nBaseField.prototype.key;\n/** @type {?} */\nBaseField.prototype.label;\n/** @type {?} */\nBaseField.prototype.type;\n/** @type {?} */\nBaseField.prototype.validators;\n}\n\n\nexport const /** @type {?} */ SIGN_IN_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const /** @type {?} */ SIGN_UP_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const /** @type {?} */ RESET_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const /** @type {?} */ UPDATE_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordCurrent',\n        label: 'Old Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../angular2-token.service';\nexport class A2tUiComponent {\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-ui',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <div class=\"a2t-container\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            width: 100%;\n            height: 100vh;\n            min-height: 500px;\n\n            padding-top: 100px;\n\n            display: flex;\n            justify-content: center;\n\n            background-color: #3270a0;\n        }\n\n        .a2t-logo {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n\n        .a2t-container {\n            width: 400px;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tUiComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tUiComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tUiComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport {\n    Http,\n    Response,\n    Headers,\n    Request,\n    RequestMethod,\n    RequestOptions,\n    RequestOptionsArgs\n} from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/observable/interval';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/pluck';\nimport'rxjs/add/operator/filter';\n\nimport {\n    SignInData,\n    RegisterData,\n    UpdatePasswordData,\n    ResetPasswordData,\n\n    UserType,\n    UserData,\n    AuthData,\n\n    Angular2TokenOptions\n} from './angular2-token.model';\nexport class Angular2TokenService implements CanActivate {\n/**\n * @return {?}\n */\nget currentUserType(): string {\n        if (this.atCurrentUserType != null)\n            return this.atCurrentUserType.name;\n        else\n            return null;\n    }\n/**\n * @return {?}\n */\nget currentUserData(): UserData {\n        return this.atCurrentUserData;\n    }\n/**\n * @return {?}\n */\nget currentAuthData(): AuthData {\n        return this.atCurrentAuthData;\n    }\n/**\n * @return {?}\n */\nget currentAuthHeaders(): Headers {\n        if (this.atCurrentAuthData != null) {\n            return new Headers({\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        return new Headers;\n    }\nprivate atOptions: Angular2TokenOptions;\nprivate atCurrentUserType: UserType;\nprivate atCurrentAuthData: AuthData;\nprivate atCurrentUserData: UserData;\n/**\n * @param {?} http\n * @param {?} activatedRoute\n * @param {?} router\n */\nconstructor(\nprivate http: Http,\nprivate activatedRoute: ActivatedRoute,\nprivate router: Router\n    ) { }\n/**\n * @return {?}\n */\nuserSignedIn(): boolean {\n        return !!this.atCurrentAuthData;\n    }\n/**\n * @return {?}\n */\ncanActivate(): boolean {\n        if (this.userSignedIn())\n            return true;\n        else {\n            // Store current location in storage (usefull for redirection after signing in)\n            if (this.atOptions.signInStoredUrlStorageKey) {\n                localStorage.setItem(\n                    this.atOptions.signInStoredUrlStorageKey,\n                    window.location.pathname + window.location.search\n                );\n            }\n\n            // Redirect user to sign in if signInRedirect is set\n            if(this.router && this.atOptions.signInRedirect)\n                this.router.navigate([this.atOptions.signInRedirect]);\n\n            return false;\n        }\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\ninit(options?: Angular2TokenOptions) {\n\n        let /** @type {?} */ defaultOptions: Angular2TokenOptions = {\n            apiPath:                    null,\n            apiBase:                    null,\n\n            signInPath:                 'auth/sign_in',\n            signInRedirect:             null,\n            signInStoredUrlStorageKey:  null,\n\n            signOutPath:                'auth/sign_out',\n            validateTokenPath:          'auth/validate_token',\n            signOutFailedValidate:      false,\n\n            registerAccountPath:        'auth',\n            deleteAccountPath:          'auth',\n            registerAccountCallback:    window.location.href,\n\n            updatePasswordPath:         'auth',\n\n            resetPasswordPath:          'auth/password',\n            resetPasswordCallback:      window.location.href,\n\n            userTypes:                  null,\n\n            oAuthBase:                  window.location.origin,\n            oAuthPaths: {\n                github:                 'auth/github'\n            },\n            oAuthCallbackPath:          'oauth_callback',\n            oAuthWindowType:            'newWindow',\n            oAuthWindowOptions:         null,\n\n            globalOptions: {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept':       'application/json'\n                }\n            }\n        };\n\n        this.atOptions = ( /** @type {?} */((<any>Object))).assign(defaultOptions, options);\n\n        this.tryLoadAuthData();\n    }\n/**\n * @param {?} registerData\n * @return {?}\n */\nregisterAccount(registerData: RegisterData): Observable<Response> {\n\n        if (registerData.userType == null)\n            this.atCurrentUserType = null;\n        else {\n            this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n            delete registerData.userType;\n        }\n\n        registerData.password_confirmation  = registerData.passwordConfirmation;\n        delete registerData.passwordConfirmation;\n\n        registerData.confirm_success_url    = this.atOptions.registerAccountCallback;\n\n        return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n    }\n/**\n * @return {?}\n */\ndeleteAccount(): Observable<Response> {\n        return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);\n    }\n/**\n * @param {?} signInData\n * @return {?}\n */\nsignIn(signInData: SignInData): Observable<Response> {\n\n        if (signInData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n\n        let /** @type {?} */ body = JSON.stringify({\n            email:      signInData.email,\n            password:   signInData.password\n        });\n\n        let /** @type {?} */ observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);\n\n        observ.subscribe(res => this.atCurrentUserData = res.json().data, _error => null);\n\n        return observ;\n    }\n/**\n * @param {?} oAuthType\n * @return {?}\n */\nsignInOAuth(oAuthType: string) {\n\n        let /** @type {?} */ oAuthPath: string = this.getOAuthPath(oAuthType);\n        let /** @type {?} */ callbackUrl: string = `${window.location.origin}/${this.atOptions.oAuthCallbackPath}`;\n        let /** @type {?} */ oAuthWindowType: string = this.atOptions.oAuthWindowType;\n        let /** @type {?} */ authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n        if (oAuthWindowType == 'newWindow') {\n            let /** @type {?} */ oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n            let /** @type {?} */ windowOptions = '';\n\n            if (oAuthWindowOptions) {\n                for (let /** @type {?} */ key in oAuthWindowOptions) {\n                    windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n                }\n            }\n\n            let /** @type {?} */ popup = window.open(\n                authUrl,\n                '_blank',\n                `closebuttoncaption=Cancel${windowOptions}`\n            );\n            return this.requestCredentialsViaPostMessage(popup);\n        } else if (oAuthWindowType == 'sameWindow') {\n            window.location.href = authUrl;\n        } else {\n            throw `Unsupported oAuthWindowType \"${oAuthWindowType}\"`;\n        }\n    }\n/**\n * @return {?}\n */\nprocessOAuthCallback(): void {\n        this.getAuthDataFromParams();\n    }\n/**\n * @return {?}\n */\nsignOut(): Observable<Response> {\n        let /** @type {?} */ observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);\n\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('client');\n        localStorage.removeItem('expiry');\n        localStorage.removeItem('tokenType');\n        localStorage.removeItem('uid');\n\n        this.atCurrentAuthData = null;\n        this.atCurrentUserType = null;\n        this.atCurrentUserData = null;\n\n        return observ;\n    }\n/**\n * @return {?}\n */\nvalidateToken(): Observable<Response> {\n        let /** @type {?} */ observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);\n\n        observ.subscribe(\n            res => this.atCurrentUserData = res.json().data,\n            error => {\n                if (error.status === 401 && this.atOptions.signOutFailedValidate) {\n                    this.signOut();\n                }\n            });\n\n        return observ;\n    }\n/**\n * @param {?} updatePasswordData\n * @return {?}\n */\nupdatePassword(updatePasswordData: UpdatePasswordData): Observable<Response> {\n\n        if (updatePasswordData.userType != null)\n            this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n\n        let /** @type {?} */ args: any;\n\n        if (updatePasswordData.passwordCurrent == null) {\n            args = {\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            }\n        } else {\n            args = {\n                current_password:       updatePasswordData.passwordCurrent,\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            };\n        }\n\n        if (updatePasswordData.resetPasswordToken) {\n            args.reset_password_token = updatePasswordData.resetPasswordToken;\n        }\n\n        let /** @type {?} */ body = JSON.stringify(args);\n        return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);\n    }\n/**\n * @param {?} resetPasswordData\n * @return {?}\n */\nresetPassword(resetPasswordData: ResetPasswordData): Observable<Response> {\n\n        if (resetPasswordData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n\n        let /** @type {?} */ body = JSON.stringify({\n            email:          resetPasswordData.email,\n            redirect_url:   this.atOptions.resetPasswordCallback\n        });\n\n        return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);\n    }\n/**\n * \n * HTTP Wrappers\n * \n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Get\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Post,\n            body:   body\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Put,\n            body:   body\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Delete\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Patch,\n            body:   body\n        }, options));\n    }\n/**\n * @param {?} path\n * @param {?=} options\n * @return {?}\n */\nhead(path: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request({\n            method: RequestMethod.Head,\n            url:    this.getApiPath() + path\n        });\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Options\n        }, options));\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nrequest(options: RequestOptionsArgs): Observable<Response> {\n\n        let /** @type {?} */ baseRequestOptions: RequestOptions;\n        let /** @type {?} */ baseHeaders:        { [key:string]: string; } = this.atOptions.globalOptions.headers;\n\n        // Get auth data from local storage\n        this.getAuthDataFromStorage();\n        \n        // Merge auth headers to request if set\n        if (this.atCurrentAuthData != null) {\n            ( /** @type {?} */((<any>Object))).assign(baseHeaders, {\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        baseRequestOptions = new RequestOptions({\n            headers: new Headers(baseHeaders)\n        });\n\n        // Merge standard and custom RequestOptions\n        baseRequestOptions = baseRequestOptions.merge(options);\n\n        let /** @type {?} */ response = this.http.request(new Request(baseRequestOptions)).share();\n        this.handleResponse(response);\n\n        return response;\n    }\n/**\n * @param {?} options\n * @param {?=} addOptions\n * @return {?}\n */\nprivate mergeRequestOptionsArgs(options: RequestOptionsArgs, addOptions?: RequestOptionsArgs): RequestOptionsArgs {\n\n        let /** @type {?} */ returnOptions: RequestOptionsArgs = options;\n\n        if (options)\n            ( /** @type {?} */((<any>Object))).assign(returnOptions, addOptions);\n\n        return returnOptions;\n    }\n/**\n * @param {?} response\n * @return {?}\n */\nprivate handleResponse(response: Observable<Response>): void {\n        response.subscribe(res => {\n            this.getAuthHeadersFromResponse( /** @type {?} */((<any>res)));\n        }, error => {\n            this.getAuthHeadersFromResponse( /** @type {?} */((<any>error)));\n        });\n    }\n/**\n * @return {?}\n */\nprivate tryLoadAuthData(): void {\n\n        let /** @type {?} */ userType = this.getUserTypeByName(localStorage.getItem('userType'));\n\n        if (userType)\n            this.atCurrentUserType = userType;\n\n        this.getAuthDataFromStorage();\n\n        if(this.activatedRoute)\n            this.getAuthDataFromParams();\n\n        if (this.atCurrentAuthData)\n            this.validateToken();\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getAuthHeadersFromResponse(data: any): void {\n        let /** @type {?} */ headers = data.headers;\n\n        let /** @type {?} */ authData: AuthData = {\n            accessToken:    headers.get('access-token'),\n            client:         headers.get('client'),\n            expiry:         headers.get('expiry'),\n            tokenType:      headers.get('token-type'),\n            uid:            headers.get('uid')\n        };\n\n        this.setAuthData(authData);\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getAuthDataFromPostMessage(data: any): void {\n        let /** @type {?} */ authData: AuthData = {\n            accessToken:    data['auth_token'],\n            client:         data['client_id'],\n            expiry:         data['expiry'],\n            tokenType:      'Bearer',\n            uid:            data['uid']\n        };\n\n        this.setAuthData(authData);\n    }\n/**\n * @return {?}\n */\nprivate getAuthDataFromStorage(): void {\n\n        let /** @type {?} */ authData: AuthData = {\n            accessToken:    localStorage.getItem('accessToken'),\n            client:         localStorage.getItem('client'),\n            expiry:         localStorage.getItem('expiry'),\n            tokenType:      localStorage.getItem('tokenType'),\n            uid:            localStorage.getItem('uid')\n        };\n\n        if (this.checkAuthData(authData))\n            this.atCurrentAuthData = authData;\n    }\n/**\n * @return {?}\n */\nprivate getAuthDataFromParams(): void {\n        if(this.activatedRoute.queryParams) // Fix for Testing, needs to be removed later\n            this.activatedRoute.queryParams.subscribe(queryParams => {\n                let /** @type {?} */ authData: AuthData = {\n                    accessToken:    queryParams['token'] || queryParams['auth_token'],\n                    client:         queryParams['client_id'],\n                    expiry:         queryParams['expiry'],\n                    tokenType:      'Bearer',\n                    uid:            queryParams['uid']\n                };\n\n                if (this.checkAuthData(authData))\n                    this.atCurrentAuthData = authData;\n            });\n    }\n/**\n * @param {?} authData\n * @return {?}\n */\nprivate setAuthData(authData: AuthData): void {\n\n        if (this.checkAuthData(authData)) {\n\n            this.atCurrentAuthData = authData;\n\n            localStorage.setItem('accessToken', authData.accessToken);\n            localStorage.setItem('client', authData.client);\n            localStorage.setItem('expiry', authData.expiry);\n            localStorage.setItem('tokenType', authData.tokenType);\n            localStorage.setItem('uid', authData.uid);\n\n            if (this.atCurrentUserType != null)\n                localStorage.setItem('userType', this.atCurrentUserType.name);\n\n        }\n    }\n/**\n * @param {?} authData\n * @return {?}\n */\nprivate checkAuthData(authData: AuthData): boolean {\n\n        if (\n            authData.accessToken != null &&\n            authData.client != null &&\n            authData.expiry != null &&\n            authData.tokenType != null &&\n            authData.uid != null\n        ) {\n            if (this.atCurrentAuthData != null)\n                return authData.expiry >= this.atCurrentAuthData.expiry;\n            else\n                return true;\n        } else {\n            return false;\n        }\n    }\n/**\n * \n * Construct Paths / Urls\n * \n * @return {?}\n */\nprivate getUserPath(): string {\n        if (this.atCurrentUserType == null)\n            return '';\n        else\n            return this.atCurrentUserType.path + '/';\n    }\n/**\n * @return {?}\n */\nprivate getApiPath(): string {\n        let /** @type {?} */ constructedPath = '';\n\n        if (this.atOptions.apiBase != null)\n            constructedPath += this.atOptions.apiBase + '/';\n\n        if (this.atOptions.apiPath != null)\n            constructedPath += this.atOptions.apiPath + '/';\n\n        return constructedPath;\n    }\n/**\n * @param {?} oAuthType\n * @return {?}\n */\nprivate getOAuthPath(oAuthType: string): string {\n        let /** @type {?} */ oAuthPath: string;\n\n        oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n\n        if (oAuthPath == null)\n            oAuthPath = `/auth/${oAuthType}`;\n\n        return oAuthPath;\n    }\n/**\n * @param {?} oAuthPath\n * @param {?} callbackUrl\n * @param {?} windowType\n * @return {?}\n */\nprivate getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n        let /** @type {?} */ url: string;\n\n        url =   `${this.atOptions.oAuthBase}/${oAuthPath}`;\n        url +=  `?omniauth_window_type=${windowType}`;\n        url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n        if (this.atCurrentUserType != null)\n            url += `&resource_class=${this.atCurrentUserType.name}`;\n\n        return url;\n    }\n/**\n * \n * OAuth\n * \n * @param {?} authWindow\n * @return {?}\n */\nprivate requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n        let /** @type {?} */ pollerObserv = Observable.interval(500);\n\n        let /** @type {?} */ responseObserv = Observable.fromEvent(window, 'message').pluck('data')\n            .filter(this.oAuthWindowResponseFilter);\n\n        let /** @type {?} */ responseSubscription = responseObserv.subscribe(\n            this.getAuthDataFromPostMessage.bind(this)\n        );\n\n        let /** @type {?} */ pollerSubscription = pollerObserv.subscribe(() => {\n            if (authWindow.closed)\n                pollerSubscription.unsubscribe();\n            else\n                authWindow.postMessage('requestCredentials', '*');\n        });\n\n        return responseObserv;\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate oAuthWindowResponseFilter(data: any): any {\n        if(data.message == 'deliverCredentials' || data.message == 'authFailure')\n            return data;\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getUserTypeByName(name: string): UserType {\n        if (name == null || this.atOptions.userTypes == null)\n            return null;\n\n        return this.atOptions.userTypes.find(\n            userType => userType.name === name\n        );\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: ActivatedRoute, decorators: [{ type: Optional }, ]},\n{type: Router, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction Angular2TokenService_tsickle_Closure_declarations() {\n/** @type {?} */\nAngular2TokenService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAngular2TokenService.ctorParameters;\n/** @type {?} */\nAngular2TokenService.prototype.atOptions;\n/** @type {?} */\nAngular2TokenService.prototype.atCurrentUserType;\n/** @type {?} */\nAngular2TokenService.prototype.atCurrentAuthData;\n/** @type {?} */\nAngular2TokenService.prototype.atCurrentUserData;\n/** @type {?} */\nAngular2TokenService.prototype.http;\n/** @type {?} */\nAngular2TokenService.prototype.activatedRoute;\n/** @type {?} */\nAngular2TokenService.prototype.router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { SignInData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_IN_FORM } from '../';\nexport class A2tSignInComponent {\n\n    _errors: string[];\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n * @param {?} _router\n */\nconstructor(\npublic _formService: A2tFormService,\npublic _sessionService: Angular2TokenService,\npublic _router: Router\n    ) {\n        this._formService.initForm(SIGN_IN_FORM);\n        this._formService.submit$.subscribe(\n            (data: SignInData) => this._sessionService.signIn(data).subscribe(\n                (res: any) =>   this._handleSuccess(res),\n                (error: any) => this._handleError(error)\n            )\n        );\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-sign-in',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Sign In</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign In</a2t-form>\n        <a2t-links case=\"sign-in\"></a2t-links>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n{type: Router, },\n];\n}\n\nfunction A2tSignInComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tSignInComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tSignInComponent.ctorParameters;\n/** @type {?} */\nA2tSignInComponent.prototype._errors;\n/** @type {?} */\nA2tSignInComponent.prototype._formService;\n/** @type {?} */\nA2tSignInComponent.prototype._sessionService;\n/** @type {?} */\nA2tSignInComponent.prototype._router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { RegisterData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_UP_FORM } from '../';\nexport class A2tSignUpComponent {\n\n    _errors: string[];\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n * @param {?} _router\n */\nconstructor(\npublic _formService: A2tFormService,\npublic _sessionService: Angular2TokenService,\npublic _router: Router\n    ) {\n        this._formService.initForm(SIGN_UP_FORM);\n        this._formService.submit$.subscribe(\n            (data: RegisterData) => this._sessionService.registerAccount(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate _handleError(error: any) {\n        this._errors = error.json().errors.full_messages;\n        this._formService.unlockSubmit();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:       'a2t-sign-up',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline>Sign Up</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign Up</a2t-form>\n        <a2t-links case=\"sign-up\"></a2t-links>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n{type: Router, },\n];\n}\n\nfunction A2tSignUpComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tSignUpComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tSignUpComponent.ctorParameters;\n/** @type {?} */\nA2tSignUpComponent.prototype._errors;\n/** @type {?} */\nA2tSignUpComponent.prototype._formService;\n/** @type {?} */\nA2tSignUpComponent.prototype._sessionService;\n/** @type {?} */\nA2tSignUpComponent.prototype._router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { ResetPasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { RESET_PASSWORD_FORM } from '../';\nexport class A2tResetPasswordComponent {\n\n    _emailSend: boolean = false;\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n */\nconstructor(\nprivate _formService: A2tFormService,\nprivate _sessionService: Angular2TokenService\n    ) {\n        this._formService.initForm(RESET_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: ResetPasswordData) => this._sessionService.resetPassword(data).subscribe(\n                res =>      this._handleSuccess(),\n                error =>    this._handleError()\n            )\n        );\n    }\n/**\n * @return {?}\n */\nprivate _handleSuccess() {\n        this._emailSend = true;\n    }\n/**\n * @return {?}\n */\nprivate _handleError() {\n        this._emailSend = true;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:       'a2t-reset-password',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline *ngIf=\"!_emailSend\">Reset your Password</a2t-headline>\n        <a2t-form *ngIf=\"!_emailSend\">Reset Password</a2t-form>\n        <p class=\"email-send-text\" *ngIf=\"_emailSend\">\n            If the entered email is registered we will send instruction on how to reset your password.\n        </p>\n        <a2t-links *ngIf=\"!_emailSend\" case=\"reset-password\"></a2t-links>\n    `,\n    styles: [`\n        .email-send-text {\n            background-color: #72c380;\n            color: white;\n            font-size: 16pt;\n            text-align: center;\n            padding: 20px;\n            border-radius: 3px;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n];\n}\n\nfunction A2tResetPasswordComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tResetPasswordComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tResetPasswordComponent.ctorParameters;\n/** @type {?} */\nA2tResetPasswordComponent.prototype._emailSend;\n/** @type {?} */\nA2tResetPasswordComponent.prototype._formService;\n/** @type {?} */\nA2tResetPasswordComponent.prototype._sessionService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { UpdatePasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { UPDATE_PASSWORD_FORM } from '../';\nexport class A2tUpdatePasswordComponent {\n\n    _errors: string[];\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n * @param {?} _router\n */\nconstructor(\npublic _formService: A2tFormService,\npublic _sessionService: Angular2TokenService,\npublic _router: Router\n    ) {\n        this._formService.initForm(UPDATE_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: UpdatePasswordData) => this._sessionService.updatePassword(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleSuccess(data: any) {\n        this._router.navigate(['session/sign-in']);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-update-password',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Update your Password</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Update Password</a2t-form>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n{type: Router, },\n];\n}\n\nfunction A2tUpdatePasswordComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tUpdatePasswordComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tUpdatePasswordComponent.ctorParameters;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._errors;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._formService;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._sessionService;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport { A2tUiComponent } from './a2t-ui.component';\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\nconst /** @type {?} */ routes: Routes = [{\n        path: 'session',\n        component: A2tUiComponent,\n        children: [\n            { path: 'sign-in', component: A2tSignInComponent },\n            { path: 'sign-up', component: A2tSignUpComponent },\n            { path: 'reset-password', component: A2tResetPasswordComponent },\n            {\n                path: 'update-password',\n                component: A2tUpdatePasswordComponent,\n                canActivate: [Angular2TokenService]\n            }\n        ]\n}];\n\nexport const /** @type {?} */ a2tRoutes = RouterModule.forChild(routes);\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport {\n    a2tRoutes,\n    A2tUiComponent,\n    A2tSharedModule,\n} from './';\n\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\nexport class A2tUiModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        RouterModule,\n        A2tSharedModule,\n        a2tRoutes\n    ],\n    declarations: [\n        A2tUiComponent,\n        A2tSignInComponent,\n        A2tSignUpComponent,\n        A2tResetPasswordComponent,\n        A2tUpdatePasswordComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tUiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tUiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tUiModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["A2tFormService","this","submit$","EventEmitter","submitLock","prototype","initForm","fields","_createFormGroup","submit","emit","formGroup","value","unlockSubmit","reset","group","forEach","question","key","FormControl","validators","FormGroup","decorators","type","Injectable","ctorParameters","A2tFormFieldComponent","ngOnInit","_control","form","controls","Object","defineProperty","get","valid","Component","args","selector","template","styles","propDecorators","Input","A2tFormComponent","_formService","A2tLinksComponent","case","A2tErrorComponent","errors","A2tHeadlineComponent","A2tSharedModule","NgModule","imports","CommonModule","ReactiveFormsModule","RouterModule","declarations","exports","BaseField","options","label","undefined","SIGN_IN_FORM","Validators","required","minLength","SIGN_UP_FORM","RESET_PASSWORD_FORM","UPDATE_PASSWORD_FORM","A2tUiComponent","Angular2TokenService","http","activatedRoute","router","atCurrentUserType","name","atCurrentUserData","atCurrentAuthData","Headers","access-token","accessToken","client","expiry","token-type","tokenType","uid","userSignedIn","canActivate","atOptions","signInStoredUrlStorageKey","localStorage","setItem","window","location","pathname","search","signInRedirect","navigate","init","defaultOptions","apiPath","apiBase","signInPath","signOutPath","validateTokenPath","signOutFailedValidate","registerAccountPath","deleteAccountPath","registerAccountCallback","href","updatePasswordPath","resetPasswordPath","resetPasswordCallback","userTypes","oAuthBase","origin","oAuthPaths","github","oAuthCallbackPath","oAuthWindowType","oAuthWindowOptions","globalOptions","headers","Content-Type","Accept","assign","tryLoadAuthData","registerAccount","registerData","userType","getUserTypeByName","password_confirmation","passwordConfirmation","confirm_success_url","post","getUserPath","JSON","stringify","deleteAccount","delete","signIn","signInData","_this","body","email","password","observ","subscribe","res","json","data","_error","signInOAuth","oAuthType","oAuthPath","getOAuthPath","callbackUrl","authUrl","getOAuthUrl","windowOptions","popup","open","requestCredentialsViaPostMessage","processOAuthCallback","getAuthDataFromParams","signOut","removeItem","validateToken","error","status","updatePassword","updatePasswordData","passwordCurrent","current_password","resetPasswordToken","reset_password_token","put","resetPassword","resetPasswordData","redirect_url","url","request","mergeRequestOptionsArgs","getApiPath","method","RequestMethod","Get","Post","Put","Delete","patch","Patch","head","path","Head","Options","baseRequestOptions","baseHeaders","getAuthDataFromStorage","RequestOptions","merge","response","Request","share","handleResponse","addOptions","returnOptions","getAuthHeadersFromResponse","getItem","authData","setAuthData","getAuthDataFromPostMessage","checkAuthData","queryParams","constructedPath","windowType","encodeURIComponent","authWindow","pollerObserv","Observable","interval","responseObserv","fromEvent","pluck","filter","oAuthWindowResponseFilter","pollerSubscription","bind","closed","unsubscribe","postMessage","message","find","Http","ActivatedRoute","Optional","Router","A2tSignInComponent","_sessionService","_router","_handleSuccess","_handleError","_errors","providers","A2tSignUpComponent","full_messages","A2tResetPasswordComponent","_emailSend","A2tUpdatePasswordComponent","routes","component","children","a2tRoutes","forChild","A2tUiModule"],"mappings":"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"}
