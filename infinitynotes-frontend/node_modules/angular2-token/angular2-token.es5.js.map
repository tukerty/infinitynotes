{"version":3,"file":"angular2-token.es5.js","sources":["ts/src/angular2-token.ts","ts/src/a2t-ui/a2t-ui.module.ts","ts/src/a2t-ui/a2t-ui.routes.ts","ts/src/a2t-ui/a2t-update-password/a2t-update-password.component.ts","ts/src/a2t-ui/a2t-reset-password/a2t-reset-password.component.ts","ts/src/a2t-ui/a2t-sign-up/a2t-sign-up.component.ts","ts/src/a2t-ui/a2t-sign-in/a2t-sign-in.component.ts","ts/src/angular2-token.service.ts","ts/src/a2t-ui/a2t-ui.component.ts","ts/src/a2t-ui/a2t-ui.forms.ts","ts/src/a2t-ui/a2t-shared/a2t-shared.module.ts","ts/src/a2t-ui/a2t-shared/a2t-headline/a2t-headline.component.ts","ts/src/a2t-ui/a2t-shared/a2t-error/a2t-error.component.ts","ts/src/a2t-ui/a2t-shared/a2t-links/a2t-links.component.ts","ts/src/a2t-ui/a2t-shared/a2t-form/a2t-form.component.ts","ts/src/a2t-ui/a2t-shared/a2t-form/a2t-form-field/a2t-form-field.component.ts","ts/src/a2t-ui/a2t-shared/a2t-form/a2t-form.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {SignInData,RegisterData,UpdatePasswordData,ResetPasswordData,UserType,UserData,AuthData,Angular2TokenOptions,A2tUiModule,Angular2TokenService} from './public_api';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport {\n    a2tRoutes,\n    A2tUiComponent,\n    A2tSharedModule,\n} from './';\n\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\nexport class A2tUiModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        RouterModule,\n        A2tSharedModule,\n        a2tRoutes\n    ],\n    declarations: [\n        A2tUiComponent,\n        A2tSignInComponent,\n        A2tSignUpComponent,\n        A2tResetPasswordComponent,\n        A2tUpdatePasswordComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tUiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tUiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tUiModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport { A2tUiComponent } from './a2t-ui.component';\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\nconst /** @type {?} */ routes: Routes = [{\n        path: 'session',\n        component: A2tUiComponent,\n        children: [\n            { path: 'sign-in', component: A2tSignInComponent },\n            { path: 'sign-up', component: A2tSignUpComponent },\n            { path: 'reset-password', component: A2tResetPasswordComponent },\n            {\n                path: 'update-password',\n                component: A2tUpdatePasswordComponent,\n                canActivate: [Angular2TokenService]\n            }\n        ]\n}];\n\nexport const /** @type {?} */ a2tRoutes = RouterModule.forChild(routes);\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { UpdatePasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { UPDATE_PASSWORD_FORM } from '../';\nexport class A2tUpdatePasswordComponent {\n\n    _errors: string[];\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n * @param {?} _router\n */\nconstructor(\npublic _formService: A2tFormService,\npublic _sessionService: Angular2TokenService,\npublic _router: Router\n    ) {\n        this._formService.initForm(UPDATE_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: UpdatePasswordData) => this._sessionService.updatePassword(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleSuccess(data: any) {\n        this._router.navigate(['session/sign-in']);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-update-password',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Update your Password</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Update Password</a2t-form>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n{type: Router, },\n];\n}\n\nfunction A2tUpdatePasswordComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tUpdatePasswordComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tUpdatePasswordComponent.ctorParameters;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._errors;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._formService;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._sessionService;\n/** @type {?} */\nA2tUpdatePasswordComponent.prototype._router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { ResetPasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { RESET_PASSWORD_FORM } from '../';\nexport class A2tResetPasswordComponent {\n\n    _emailSend: boolean = false;\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n */\nconstructor(\nprivate _formService: A2tFormService,\nprivate _sessionService: Angular2TokenService\n    ) {\n        this._formService.initForm(RESET_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: ResetPasswordData) => this._sessionService.resetPassword(data).subscribe(\n                res =>      this._handleSuccess(),\n                error =>    this._handleError()\n            )\n        );\n    }\n/**\n * @return {?}\n */\nprivate _handleSuccess() {\n        this._emailSend = true;\n    }\n/**\n * @return {?}\n */\nprivate _handleError() {\n        this._emailSend = true;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:       'a2t-reset-password',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline *ngIf=\"!_emailSend\">Reset your Password</a2t-headline>\n        <a2t-form *ngIf=\"!_emailSend\">Reset Password</a2t-form>\n        <p class=\"email-send-text\" *ngIf=\"_emailSend\">\n            If the entered email is registered we will send instruction on how to reset your password.\n        </p>\n        <a2t-links *ngIf=\"!_emailSend\" case=\"reset-password\"></a2t-links>\n    `,\n    styles: [`\n        .email-send-text {\n            background-color: #72c380;\n            color: white;\n            font-size: 16pt;\n            text-align: center;\n            padding: 20px;\n            border-radius: 3px;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n];\n}\n\nfunction A2tResetPasswordComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tResetPasswordComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tResetPasswordComponent.ctorParameters;\n/** @type {?} */\nA2tResetPasswordComponent.prototype._emailSend;\n/** @type {?} */\nA2tResetPasswordComponent.prototype._formService;\n/** @type {?} */\nA2tResetPasswordComponent.prototype._sessionService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { RegisterData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_UP_FORM } from '../';\nexport class A2tSignUpComponent {\n\n    _errors: string[];\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n * @param {?} _router\n */\nconstructor(\npublic _formService: A2tFormService,\npublic _sessionService: Angular2TokenService,\npublic _router: Router\n    ) {\n        this._formService.initForm(SIGN_UP_FORM);\n        this._formService.submit$.subscribe(\n            (data: RegisterData) => this._sessionService.registerAccount(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate _handleError(error: any) {\n        this._errors = error.json().errors.full_messages;\n        this._formService.unlockSubmit();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:       'a2t-sign-up',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline>Sign Up</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign Up</a2t-form>\n        <a2t-links case=\"sign-up\"></a2t-links>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n{type: Router, },\n];\n}\n\nfunction A2tSignUpComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tSignUpComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tSignUpComponent.ctorParameters;\n/** @type {?} */\nA2tSignUpComponent.prototype._errors;\n/** @type {?} */\nA2tSignUpComponent.prototype._formService;\n/** @type {?} */\nA2tSignUpComponent.prototype._sessionService;\n/** @type {?} */\nA2tSignUpComponent.prototype._router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { SignInData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_IN_FORM } from '../';\nexport class A2tSignInComponent {\n\n    _errors: string[];\n/**\n * @param {?} _formService\n * @param {?} _sessionService\n * @param {?} _router\n */\nconstructor(\npublic _formService: A2tFormService,\npublic _sessionService: Angular2TokenService,\npublic _router: Router\n    ) {\n        this._formService.initForm(SIGN_IN_FORM);\n        this._formService.submit$.subscribe(\n            (data: SignInData) => this._sessionService.signIn(data).subscribe(\n                (res: any) =>   this._handleSuccess(res),\n                (error: any) => this._handleError(error)\n            )\n        );\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-sign-in',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Sign In</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign In</a2t-form>\n        <a2t-links case=\"sign-in\"></a2t-links>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n{type: Angular2TokenService, },\n{type: Router, },\n];\n}\n\nfunction A2tSignInComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tSignInComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tSignInComponent.ctorParameters;\n/** @type {?} */\nA2tSignInComponent.prototype._errors;\n/** @type {?} */\nA2tSignInComponent.prototype._formService;\n/** @type {?} */\nA2tSignInComponent.prototype._sessionService;\n/** @type {?} */\nA2tSignInComponent.prototype._router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport {\n    Http,\n    Response,\n    Headers,\n    Request,\n    RequestMethod,\n    RequestOptions,\n    RequestOptionsArgs\n} from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/observable/interval';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/pluck';\nimport'rxjs/add/operator/filter';\n\nimport {\n    SignInData,\n    RegisterData,\n    UpdatePasswordData,\n    ResetPasswordData,\n\n    UserType,\n    UserData,\n    AuthData,\n\n    Angular2TokenOptions\n} from './angular2-token.model';\nexport class Angular2TokenService implements CanActivate {\n/**\n * @return {?}\n */\nget currentUserType(): string {\n        if (this.atCurrentUserType != null)\n            return this.atCurrentUserType.name;\n        else\n            return null;\n    }\n/**\n * @return {?}\n */\nget currentUserData(): UserData {\n        return this.atCurrentUserData;\n    }\n/**\n * @return {?}\n */\nget currentAuthData(): AuthData {\n        return this.atCurrentAuthData;\n    }\n/**\n * @return {?}\n */\nget currentAuthHeaders(): Headers {\n        if (this.atCurrentAuthData != null) {\n            return new Headers({\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        return new Headers;\n    }\nprivate atOptions: Angular2TokenOptions;\nprivate atCurrentUserType: UserType;\nprivate atCurrentAuthData: AuthData;\nprivate atCurrentUserData: UserData;\n/**\n * @param {?} http\n * @param {?} activatedRoute\n * @param {?} router\n */\nconstructor(\nprivate http: Http,\nprivate activatedRoute: ActivatedRoute,\nprivate router: Router\n    ) { }\n/**\n * @return {?}\n */\nuserSignedIn(): boolean {\n        return !!this.atCurrentAuthData;\n    }\n/**\n * @return {?}\n */\ncanActivate(): boolean {\n        if (this.userSignedIn())\n            return true;\n        else {\n            // Store current location in storage (usefull for redirection after signing in)\n            if (this.atOptions.signInStoredUrlStorageKey) {\n                localStorage.setItem(\n                    this.atOptions.signInStoredUrlStorageKey,\n                    window.location.pathname + window.location.search\n                );\n            }\n\n            // Redirect user to sign in if signInRedirect is set\n            if(this.router && this.atOptions.signInRedirect)\n                this.router.navigate([this.atOptions.signInRedirect]);\n\n            return false;\n        }\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\ninit(options?: Angular2TokenOptions) {\n\n        let /** @type {?} */ defaultOptions: Angular2TokenOptions = {\n            apiPath:                    null,\n            apiBase:                    null,\n\n            signInPath:                 'auth/sign_in',\n            signInRedirect:             null,\n            signInStoredUrlStorageKey:  null,\n\n            signOutPath:                'auth/sign_out',\n            validateTokenPath:          'auth/validate_token',\n            signOutFailedValidate:      false,\n\n            registerAccountPath:        'auth',\n            deleteAccountPath:          'auth',\n            registerAccountCallback:    window.location.href,\n\n            updatePasswordPath:         'auth',\n\n            resetPasswordPath:          'auth/password',\n            resetPasswordCallback:      window.location.href,\n\n            userTypes:                  null,\n\n            oAuthBase:                  window.location.origin,\n            oAuthPaths: {\n                github:                 'auth/github'\n            },\n            oAuthCallbackPath:          'oauth_callback',\n            oAuthWindowType:            'newWindow',\n            oAuthWindowOptions:         null,\n\n            globalOptions: {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept':       'application/json'\n                }\n            }\n        };\n\n        this.atOptions = ( /** @type {?} */((<any>Object))).assign(defaultOptions, options);\n\n        this.tryLoadAuthData();\n    }\n/**\n * @param {?} registerData\n * @return {?}\n */\nregisterAccount(registerData: RegisterData): Observable<Response> {\n\n        if (registerData.userType == null)\n            this.atCurrentUserType = null;\n        else {\n            this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n            delete registerData.userType;\n        }\n\n        registerData.password_confirmation  = registerData.passwordConfirmation;\n        delete registerData.passwordConfirmation;\n\n        registerData.confirm_success_url    = this.atOptions.registerAccountCallback;\n\n        return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n    }\n/**\n * @return {?}\n */\ndeleteAccount(): Observable<Response> {\n        return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);\n    }\n/**\n * @param {?} signInData\n * @return {?}\n */\nsignIn(signInData: SignInData): Observable<Response> {\n\n        if (signInData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n\n        let /** @type {?} */ body = JSON.stringify({\n            email:      signInData.email,\n            password:   signInData.password\n        });\n\n        let /** @type {?} */ observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);\n\n        observ.subscribe(res => this.atCurrentUserData = res.json().data, _error => null);\n\n        return observ;\n    }\n/**\n * @param {?} oAuthType\n * @return {?}\n */\nsignInOAuth(oAuthType: string) {\n\n        let /** @type {?} */ oAuthPath: string = this.getOAuthPath(oAuthType);\n        let /** @type {?} */ callbackUrl: string = `${window.location.origin}/${this.atOptions.oAuthCallbackPath}`;\n        let /** @type {?} */ oAuthWindowType: string = this.atOptions.oAuthWindowType;\n        let /** @type {?} */ authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n        if (oAuthWindowType == 'newWindow') {\n            let /** @type {?} */ oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n            let /** @type {?} */ windowOptions = '';\n\n            if (oAuthWindowOptions) {\n                for (let /** @type {?} */ key in oAuthWindowOptions) {\n                    windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n                }\n            }\n\n            let /** @type {?} */ popup = window.open(\n                authUrl,\n                '_blank',\n                `closebuttoncaption=Cancel${windowOptions}`\n            );\n            return this.requestCredentialsViaPostMessage(popup);\n        } else if (oAuthWindowType == 'sameWindow') {\n            window.location.href = authUrl;\n        } else {\n            throw `Unsupported oAuthWindowType \"${oAuthWindowType}\"`;\n        }\n    }\n/**\n * @return {?}\n */\nprocessOAuthCallback(): void {\n        this.getAuthDataFromParams();\n    }\n/**\n * @return {?}\n */\nsignOut(): Observable<Response> {\n        let /** @type {?} */ observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);\n\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('client');\n        localStorage.removeItem('expiry');\n        localStorage.removeItem('tokenType');\n        localStorage.removeItem('uid');\n\n        this.atCurrentAuthData = null;\n        this.atCurrentUserType = null;\n        this.atCurrentUserData = null;\n\n        return observ;\n    }\n/**\n * @return {?}\n */\nvalidateToken(): Observable<Response> {\n        let /** @type {?} */ observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);\n\n        observ.subscribe(\n            res => this.atCurrentUserData = res.json().data,\n            error => {\n                if (error.status === 401 && this.atOptions.signOutFailedValidate) {\n                    this.signOut();\n                }\n            });\n\n        return observ;\n    }\n/**\n * @param {?} updatePasswordData\n * @return {?}\n */\nupdatePassword(updatePasswordData: UpdatePasswordData): Observable<Response> {\n\n        if (updatePasswordData.userType != null)\n            this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n\n        let /** @type {?} */ args: any;\n\n        if (updatePasswordData.passwordCurrent == null) {\n            args = {\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            }\n        } else {\n            args = {\n                current_password:       updatePasswordData.passwordCurrent,\n                password:               updatePasswordData.password,\n                password_confirmation:  updatePasswordData.passwordConfirmation\n            };\n        }\n\n        if (updatePasswordData.resetPasswordToken) {\n            args.reset_password_token = updatePasswordData.resetPasswordToken;\n        }\n\n        let /** @type {?} */ body = JSON.stringify(args);\n        return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);\n    }\n/**\n * @param {?} resetPasswordData\n * @return {?}\n */\nresetPassword(resetPasswordData: ResetPasswordData): Observable<Response> {\n\n        if (resetPasswordData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n\n        let /** @type {?} */ body = JSON.stringify({\n            email:          resetPasswordData.email,\n            redirect_url:   this.atOptions.resetPasswordCallback\n        });\n\n        return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);\n    }\n/**\n * \n * HTTP Wrappers\n * \n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Get\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Post,\n            body:   body\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Put,\n            body:   body\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Delete\n        }, options));\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Patch,\n            body:   body\n        }, options));\n    }\n/**\n * @param {?} path\n * @param {?=} options\n * @return {?}\n */\nhead(path: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request({\n            method: RequestMethod.Head,\n            url:    this.getApiPath() + path\n        });\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.request(this.mergeRequestOptionsArgs({\n            url:    this.getApiPath() + url,\n            method: RequestMethod.Options\n        }, options));\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nrequest(options: RequestOptionsArgs): Observable<Response> {\n\n        let /** @type {?} */ baseRequestOptions: RequestOptions;\n        let /** @type {?} */ baseHeaders:        { [key:string]: string; } = this.atOptions.globalOptions.headers;\n\n        // Get auth data from local storage\n        this.getAuthDataFromStorage();\n        \n        // Merge auth headers to request if set\n        if (this.atCurrentAuthData != null) {\n            ( /** @type {?} */((<any>Object))).assign(baseHeaders, {\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client':       this.atCurrentAuthData.client,\n                'expiry':       this.atCurrentAuthData.expiry,\n                'token-type':   this.atCurrentAuthData.tokenType,\n                'uid':          this.atCurrentAuthData.uid\n            });\n        }\n\n        baseRequestOptions = new RequestOptions({\n            headers: new Headers(baseHeaders)\n        });\n\n        // Merge standard and custom RequestOptions\n        baseRequestOptions = baseRequestOptions.merge(options);\n\n        let /** @type {?} */ response = this.http.request(new Request(baseRequestOptions)).share();\n        this.handleResponse(response);\n\n        return response;\n    }\n/**\n * @param {?} options\n * @param {?=} addOptions\n * @return {?}\n */\nprivate mergeRequestOptionsArgs(options: RequestOptionsArgs, addOptions?: RequestOptionsArgs): RequestOptionsArgs {\n\n        let /** @type {?} */ returnOptions: RequestOptionsArgs = options;\n\n        if (options)\n            ( /** @type {?} */((<any>Object))).assign(returnOptions, addOptions);\n\n        return returnOptions;\n    }\n/**\n * @param {?} response\n * @return {?}\n */\nprivate handleResponse(response: Observable<Response>): void {\n        response.subscribe(res => {\n            this.getAuthHeadersFromResponse( /** @type {?} */((<any>res)));\n        }, error => {\n            this.getAuthHeadersFromResponse( /** @type {?} */((<any>error)));\n        });\n    }\n/**\n * @return {?}\n */\nprivate tryLoadAuthData(): void {\n\n        let /** @type {?} */ userType = this.getUserTypeByName(localStorage.getItem('userType'));\n\n        if (userType)\n            this.atCurrentUserType = userType;\n\n        this.getAuthDataFromStorage();\n\n        if(this.activatedRoute)\n            this.getAuthDataFromParams();\n\n        if (this.atCurrentAuthData)\n            this.validateToken();\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getAuthHeadersFromResponse(data: any): void {\n        let /** @type {?} */ headers = data.headers;\n\n        let /** @type {?} */ authData: AuthData = {\n            accessToken:    headers.get('access-token'),\n            client:         headers.get('client'),\n            expiry:         headers.get('expiry'),\n            tokenType:      headers.get('token-type'),\n            uid:            headers.get('uid')\n        };\n\n        this.setAuthData(authData);\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getAuthDataFromPostMessage(data: any): void {\n        let /** @type {?} */ authData: AuthData = {\n            accessToken:    data['auth_token'],\n            client:         data['client_id'],\n            expiry:         data['expiry'],\n            tokenType:      'Bearer',\n            uid:            data['uid']\n        };\n\n        this.setAuthData(authData);\n    }\n/**\n * @return {?}\n */\nprivate getAuthDataFromStorage(): void {\n\n        let /** @type {?} */ authData: AuthData = {\n            accessToken:    localStorage.getItem('accessToken'),\n            client:         localStorage.getItem('client'),\n            expiry:         localStorage.getItem('expiry'),\n            tokenType:      localStorage.getItem('tokenType'),\n            uid:            localStorage.getItem('uid')\n        };\n\n        if (this.checkAuthData(authData))\n            this.atCurrentAuthData = authData;\n    }\n/**\n * @return {?}\n */\nprivate getAuthDataFromParams(): void {\n        if(this.activatedRoute.queryParams) // Fix for Testing, needs to be removed later\n            this.activatedRoute.queryParams.subscribe(queryParams => {\n                let /** @type {?} */ authData: AuthData = {\n                    accessToken:    queryParams['token'] || queryParams['auth_token'],\n                    client:         queryParams['client_id'],\n                    expiry:         queryParams['expiry'],\n                    tokenType:      'Bearer',\n                    uid:            queryParams['uid']\n                };\n\n                if (this.checkAuthData(authData))\n                    this.atCurrentAuthData = authData;\n            });\n    }\n/**\n * @param {?} authData\n * @return {?}\n */\nprivate setAuthData(authData: AuthData): void {\n\n        if (this.checkAuthData(authData)) {\n\n            this.atCurrentAuthData = authData;\n\n            localStorage.setItem('accessToken', authData.accessToken);\n            localStorage.setItem('client', authData.client);\n            localStorage.setItem('expiry', authData.expiry);\n            localStorage.setItem('tokenType', authData.tokenType);\n            localStorage.setItem('uid', authData.uid);\n\n            if (this.atCurrentUserType != null)\n                localStorage.setItem('userType', this.atCurrentUserType.name);\n\n        }\n    }\n/**\n * @param {?} authData\n * @return {?}\n */\nprivate checkAuthData(authData: AuthData): boolean {\n\n        if (\n            authData.accessToken != null &&\n            authData.client != null &&\n            authData.expiry != null &&\n            authData.tokenType != null &&\n            authData.uid != null\n        ) {\n            if (this.atCurrentAuthData != null)\n                return authData.expiry >= this.atCurrentAuthData.expiry;\n            else\n                return true;\n        } else {\n            return false;\n        }\n    }\n/**\n * \n * Construct Paths / Urls\n * \n * @return {?}\n */\nprivate getUserPath(): string {\n        if (this.atCurrentUserType == null)\n            return '';\n        else\n            return this.atCurrentUserType.path + '/';\n    }\n/**\n * @return {?}\n */\nprivate getApiPath(): string {\n        let /** @type {?} */ constructedPath = '';\n\n        if (this.atOptions.apiBase != null)\n            constructedPath += this.atOptions.apiBase + '/';\n\n        if (this.atOptions.apiPath != null)\n            constructedPath += this.atOptions.apiPath + '/';\n\n        return constructedPath;\n    }\n/**\n * @param {?} oAuthType\n * @return {?}\n */\nprivate getOAuthPath(oAuthType: string): string {\n        let /** @type {?} */ oAuthPath: string;\n\n        oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n\n        if (oAuthPath == null)\n            oAuthPath = `/auth/${oAuthType}`;\n\n        return oAuthPath;\n    }\n/**\n * @param {?} oAuthPath\n * @param {?} callbackUrl\n * @param {?} windowType\n * @return {?}\n */\nprivate getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n        let /** @type {?} */ url: string;\n\n        url =   `${this.atOptions.oAuthBase}/${oAuthPath}`;\n        url +=  `?omniauth_window_type=${windowType}`;\n        url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n        if (this.atCurrentUserType != null)\n            url += `&resource_class=${this.atCurrentUserType.name}`;\n\n        return url;\n    }\n/**\n * \n * OAuth\n * \n * @param {?} authWindow\n * @return {?}\n */\nprivate requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n        let /** @type {?} */ pollerObserv = Observable.interval(500);\n\n        let /** @type {?} */ responseObserv = Observable.fromEvent(window, 'message').pluck('data')\n            .filter(this.oAuthWindowResponseFilter);\n\n        let /** @type {?} */ responseSubscription = responseObserv.subscribe(\n            this.getAuthDataFromPostMessage.bind(this)\n        );\n\n        let /** @type {?} */ pollerSubscription = pollerObserv.subscribe(() => {\n            if (authWindow.closed)\n                pollerSubscription.unsubscribe();\n            else\n                authWindow.postMessage('requestCredentials', '*');\n        });\n\n        return responseObserv;\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate oAuthWindowResponseFilter(data: any): any {\n        if(data.message == 'deliverCredentials' || data.message == 'authFailure')\n            return data;\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getUserTypeByName(name: string): UserType {\n        if (name == null || this.atOptions.userTypes == null)\n            return null;\n\n        return this.atOptions.userTypes.find(\n            userType => userType.name === name\n        );\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: ActivatedRoute, decorators: [{ type: Optional }, ]},\n{type: Router, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction Angular2TokenService_tsickle_Closure_declarations() {\n/** @type {?} */\nAngular2TokenService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAngular2TokenService.ctorParameters;\n/** @type {?} */\nAngular2TokenService.prototype.atOptions;\n/** @type {?} */\nAngular2TokenService.prototype.atCurrentUserType;\n/** @type {?} */\nAngular2TokenService.prototype.atCurrentAuthData;\n/** @type {?} */\nAngular2TokenService.prototype.atCurrentUserData;\n/** @type {?} */\nAngular2TokenService.prototype.http;\n/** @type {?} */\nAngular2TokenService.prototype.activatedRoute;\n/** @type {?} */\nAngular2TokenService.prototype.router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../angular2-token.service';\nexport class A2tUiComponent {\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-ui',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <div class=\"a2t-container\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            width: 100%;\n            height: 100vh;\n            min-height: 500px;\n\n            padding-top: 100px;\n\n            display: flex;\n            justify-content: center;\n\n            background-color: #3270a0;\n        }\n\n        .a2t-logo {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n\n        .a2t-container {\n            width: 400px;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tUiComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tUiComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tUiComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Validators } from '@angular/forms';\nexport class BaseField{\n    value: string;\n    key: string;\n    label: string;\n    type: string;\n    validators: any[];\n/**\n * @param {?=} options\n */\nconstructor(options: {\n        value?: string,\n        key?: string,\n        label?: string,\n        type?: string,\n        validators?: any[],\n    } = {}) {\n        this.value = options.value;\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.validators = options.validators === undefined ? [] : options.validators;\n        this.type = options.type || '';\n    }\n}\n\nfunction BaseField_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseField.prototype.value;\n/** @type {?} */\nBaseField.prototype.key;\n/** @type {?} */\nBaseField.prototype.label;\n/** @type {?} */\nBaseField.prototype.type;\n/** @type {?} */\nBaseField.prototype.validators;\n}\n\n\nexport const /** @type {?} */ SIGN_IN_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const /** @type {?} */ SIGN_UP_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const /** @type {?} */ RESET_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const /** @type {?} */ UPDATE_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordCurrent',\n        label: 'Old Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { A2tFormComponent, A2tFormFieldComponent } from './a2t-form';\nimport { A2tLinksComponent } from './a2t-links/a2t-links.component';\nimport { A2tErrorComponent } from './a2t-error/a2t-error.component';\nimport { A2tHeadlineComponent } from './a2t-headline/a2t-headline.component';\nexport class A2tSharedModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        RouterModule\n    ],\n    declarations: [\n        A2tFormFieldComponent,\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ],\n    exports: [\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tSharedModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tSharedModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tSharedModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nexport class A2tHeadlineComponent {\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-headline',\n    template:   '<p><ng-content></ng-content></p>',\n    styles:  [`\n        p {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tHeadlineComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tHeadlineComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tHeadlineComponent.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nexport class A2tErrorComponent {\n\n     errors: string[];\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-error',\n    template:   '<div *ngFor=\"let error of errors\"><p>{{error}}</p></div>',\n    styles: [`\n        div {\n            width: 100%;\n            background-color: #df6564;\n            color: white;\n            font-weight: 300;\n            font-size: 15px;\n            padding: 10px 20px;\n            border-radius: 3px;\n            margin-bottom: 15px;\n        }\n\n        div > p {\n            margin-bottom: 0;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'errors': [{ type: Input },],\n};\n}\n\nfunction A2tErrorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tErrorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tErrorComponent.ctorParameters;\n/** @type {?} */\nA2tErrorComponent.propDecorators;\n/** @type {?} */\nA2tErrorComponent.prototype.errors;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input } from '@angular/core';\nexport class A2tLinksComponent {\n\n     case: string;\nconstructor() { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-links',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <p><a routerLink=\"/session/reset-password\" *ngIf=\"case != 'reset-password'\">Forgot Password?</a></p>\n            <p><a routerLink=\"/session/sign-up\" *ngIf=\"case != 'sign-up'\">Sign Up</a></p>\n            <p><a routerLink=\"/session/sign-in\" *ngIf=\"case != 'sign-in'\">Sign In</a></p>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            margin-top: 20px;\n        }\n\n        p {\n            margin-bottom: 0;\n        }\n\n        a {\n            color: #eee !important;\n            transition: .3s;\n            text-decoration: none;\n            font-size: 15px;\n            font-weight: 300;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        a:hover {\n            color: white;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'case': [{ type: Input },],\n};\n}\n\nfunction A2tLinksComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tLinksComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tLinksComponent.ctorParameters;\n/** @type {?} */\nA2tLinksComponent.propDecorators;\n/** @type {?} */\nA2tLinksComponent.prototype.case;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\n\nimport { A2tFormService } from './a2t-form.service';\nimport { A2tFormFieldComponent } from './a2t-form-field/a2t-form-field.component';\nexport class A2tFormComponent {\n/**\n * @param {?} _formService\n */\nconstructor(public _formService: A2tFormService) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'a2t-form',\n    template: `\n        <form class=\"a2t-form\"\n            (ngSubmit)=\"_formService.submit()\"\n            [formGroup]=\"_formService.formGroup\">\n\n            <a2t-form-field\n                *ngFor=\"let field of this._formService.fields\"\n                [question]=\"field\"\n                [form]=\"_formService.formGroup\">\n            </a2t-form-field>\n\n            <button type=\"submit\" [disabled]=\"!_formService.formGroup.valid || _formService.formGroup.pristine || _formService.submitLock\">\n                <ng-content *ngIf=\"!_formService.submitLock\"></ng-content>\n                <span *ngIf=\"_formService.submitLock\">Submitting ...</span>\n            </button>\n        </form>\n    `,\n    styles: [`\n        .a2t-form {\n            background-color: white;\n            border-radius: 3px;\n            box-shadow: 0px 1px 5px 0 rgba(0,0,0,0.3);\n            padding-top: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-form button {\n            width: 100%;\n\n            transition: .3s;\n            background-color: #72c380;\n\n            border-bottom-right-radius: 3px;\n            border-bottom-left-radius: 3px;\n\n            outline: none;\n            text-align: center;\n            font-weight: 400;\n            border: none;\n            font-size: 16px;\n            line-height: 30px;\n\n            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n            color: white;\n            border-bottom: 3px solid transparent;\n        }\n\n        .a2t-form button:disabled {\n            background-color: #eee !important;\n            cursor: not-allowed;\n            color: #999;\n            text-shadow: none;\n        }\n\n        .a2t-form button:hover {\n            background-color: #a6d9ae;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: A2tFormService, },\n];\n}\n\nfunction A2tFormComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tFormComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tFormComponent.ctorParameters;\n/** @type {?} */\nA2tFormComponent.prototype._formService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\n\nimport { BaseField } from '../../../a2t-ui.forms';\nexport class A2tFormFieldComponent implements OnInit {\n\n     question:  BaseField;\n     form:      FormGroup;\n\n    _control:   AbstractControl;\n/**\n * @return {?}\n */\nngOnInit() {\n        this._control = this.form.controls[this.question.key];\n    }\n/**\n * @return {?}\n */\nget isValid() {\n        return this._control.valid;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector:   'a2t-form-field',\n    template: `\n        <div class=\"a2t-input-group\"\n            [formGroup]=\"form\">\n\n            <label\n                [attr.for]=\"question.key\"\n                [style.color]=\"labelColor\"\n                *ngIf=\"_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('required') && !_control.pristine\">\n                {{question.label}} is required\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('minlength')\">\n                {{question.label}} is too short\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('maxlength')\">\n                {{question.label}} is too long\n            </label>\n\n            <label class=\"a2t-valid\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.valid && !_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <input\n                [formControlName]=\"question.key\"\n                [id]=\"question.key\"\n                [type]=\"question.type\">\n        </div>\n    `,\n    styles: [`\n        .a2t-input-group {\n            padding-bottom: 40px;\n            padding-right: 20px;\n            padding-left: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-input-group input {\n            width: 100%;\n            outline: none;\n            border: none;\n            background-color: #eee;\n            line-height: 40px;\n\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n\n        .a2t-input-group label {\n            color: #666;\n            font-weight: 600;\n            font-size: 13px;\n            margin-bottom: 0;\n        }\n\n        .a2t-error {\n            color: #df6564 !important;\n        }\n\n        .a2t-valid {\n            color: #72c380 !important;\n        }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'question': [{ type: Input },],\n'form': [{ type: Input },],\n};\n}\n\nfunction A2tFormFieldComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tFormFieldComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tFormFieldComponent.ctorParameters;\n/** @type {?} */\nA2tFormFieldComponent.propDecorators;\n/** @type {?} */\nA2tFormFieldComponent.prototype.question;\n/** @type {?} */\nA2tFormFieldComponent.prototype.form;\n/** @type {?} */\nA2tFormFieldComponent.prototype._control;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\n\nimport { SignInData } from '../../../angular2-token.model';\nimport { BaseField } from '../../a2t-ui.forms';\nexport class A2tFormService {\npublic submit$ = new EventEmitter<any>();\npublic submitLock: boolean = false;\npublic formGroup: FormGroup;\npublic fields: BaseField[];\nconstructor() { }\n/**\n * @param {?} fields\n * @return {?}\n */\npublic initForm(fields: BaseField[]) {\n        this.fields = fields;\n        this._createFormGroup();\n    }\n/**\n * @return {?}\n */\npublic submit() {\n        this.submitLock = true;\n        this.submit$.emit(this.formGroup.value);\n    }\n/**\n * @return {?}\n */\npublic unlockSubmit() {\n        this.formGroup.reset();\n        this.submitLock = false;\n    };\n/**\n * @return {?}\n */\nprivate _createFormGroup() {\n\n        let /** @type {?} */ group: any = {};\n\n        this.fields.forEach(question => {\n            group[question.key] = new FormControl(null, question.validators);\n        });\n\n        this.formGroup = new FormGroup(group);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A2tFormService_tsickle_Closure_declarations() {\n/** @type {?} */\nA2tFormService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA2tFormService.ctorParameters;\n/** @type {?} */\nA2tFormService.prototype.submit$;\n/** @type {?} */\nA2tFormService.prototype.submitLock;\n/** @type {?} */\nA2tFormService.prototype.formGroup;\n/** @type {?} */\nA2tFormService.prototype.fields;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Observable","router","http"],"mappings":"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"}
